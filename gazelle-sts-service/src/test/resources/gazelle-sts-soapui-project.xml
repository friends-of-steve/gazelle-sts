<?xml version="1.0" encoding="UTF-8"?>
<!--@formatter:off--><con:soapui-project id="16d88d0d-d68d-4e28-b2e1-41665ec5f906" activeEnvironment="Default" name="Gazelle-STS" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" encryptionMode="Not encrypted" updated="2.8.2 2019-08-27T17:04:01Z" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
    <con:interface xsi:type="con:WsdlInterface" id="d4f9f403-b774-4f8e-ba54-e5b2423331cf" wsaVersion="NONE" name="STSBinding" type="wsdl" bindingName="{urn:gazelle.ihe.net:sts}STSBinding" soapVersion="1_2" anonymous="optional" definition="http://localhost:8180/gazelle-sts?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    
    <con:definitionCache type="TEXT" rootPart="http://localhost:8180/gazelle-sts?wsdl"><con:part><con:url>http://localhost:8180/gazelle-sts?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="GazelleSTS" targetNamespace="urn:gazelle.ihe.net:sts" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsap10="http://www.w3.org/2006/05/addressing/wsdl" xmlns:tns="urn:gazelle.ihe.net:sts" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/">
  <wsdl:types>
    <xs:schema elementFormDefault="qualified" targetNamespace="urn:gazelle.ihe.net:sts" version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:element name="MessageBody">
        <xs:complexType>
          <xs:sequence>
            <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##any"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="RequestSecurityTokenResponse">
    <wsdl:part element="tns:MessageBody" name="rstrMessage"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="RequestSecurityToken">
    <wsdl:part element="tns:MessageBody" name="rstMessage"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="SecureTokenService">
    <wsdl:operation name="IssueToken">
      <wsdl:input message="tns:RequestSecurityToken" wsap10:Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"></wsdl:input>
      <wsdl:output message="tns:RequestSecurityTokenResponse" wsap10:Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Issue"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="STSBinding" type="tns:SecureTokenService">
    <soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="IssueToken">
      <soap12:operation soapAction="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GazelleSTS">
    <wsdl:port binding="tns:STSBinding" name="GazelleSTSPort">
      <soap12:address location="http://localhost:8180/gazelle-sts"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints>
      <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
      
    <con:endpoint>http://localhost:8180/gazelle-sts</con:endpoint><con:endpoint>https://sake.irisa.fr/gazelle-sts</con:endpoint><con:endpoint>https://sake.irisa.fr/gazelle-sts</con:endpoint><con:endpoint>https://sake.irisa.fr/gazelle-sts</con:endpoint></con:endpoints>
    <con:operation id="99efd8fb-9f5b-47aa-ba5b-3c71add73f78" isOneWay="false" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue" name="IssueToken" bindingOperationName="IssueToken" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional">
      <con:settings/>
      <con:call id="caa8f68e-dac7-4f1d-a1f2-f976f7e0c2b2" name="Issue" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://localhost:8180/gazelle-sts</con:endpoint>
        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" env:mustUnderstand="true">
         <wsse:UsernameToken wsu:Id="UsernameToken-1">
            <wsse:Username>?</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">?</wsse:Password>
            <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">JpQqP2iLrH9DbvaX0GAO9g==</wsse:Nonce>
         </wsse:UsernameToken>
      </wsse:Security>
      <Action xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>?</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call id="801f5adf-b5a5-40d2-ad13-1e70fa5c37f5" name="Validate" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://localhost:8180/gazelle-sts</con:endpoint>
        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
   <soap:Header>
      <Action xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Validate</wst:RequestType>       
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>       
         <wst:ValidateTarget>        
            <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">
            ?
            </saml2:Assertion>       
         </wst:ValidateTarget>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call id="d8c646ec-43ea-4412-8b9d-b590cbe7163c" name="Cancel" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://localhost:8180/gazelle-sts</con:endpoint>
        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" env:mustUnderstand="true">
         <wsse:UsernameToken wsu:Id="UsernameToken-1">
            <wsse:Username>?</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">?</wsse:Password>
            <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">1S0diJqtjPm78XodEjcwKQ==</wsse:Nonce>
         </wsse:UsernameToken>
      </wsse:Security>
      <Action xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Cancel</wst:RequestType>                
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>        
         <wst:CancelTarget>        
            <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">
            ?
            </saml2:Assertion>   
         </wst:CancelTarget>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call id="4e45d656-4767-4839-ae95-835230ad2623" name="Renew" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://localhost:8180/gazelle-sts</con:endpoint>
        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" soap:mustUnderstand="true">
         <wsse:UsernameToken wsu:Id="UsernameToken-1">
            <wsse:Username>?</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">?</wsse:Password>
            <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">1S0diJqtjPm78XodEjcwKQ==</wsse:Nonce>
         </wsse:UsernameToken>
      </wsse:Security>
      <Action xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>   
      <MessageID xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo xmlns="http://www.w3.org/2005/08/addressing" soap:mustUnderstand="true">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Renew</wst:RequestType>       
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
         <wst:RenewTarget>        
            <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">
            ?
            </saml2:Assertion>  
         </wst:RenewTarget>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
    <con:testSuite id="245ee7f7-df56-46c2-babd-2ac02052fd83" name="Base">
        <con:settings/>
        <con:runType>SEQUENTIAL</con:runType>
        <con:testCase id="ae752437-039a-48c9-a6d3-9c83138469d0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Issue" searchProperties="true">
            <con:settings/>
            <con:testStep type="calltestcase" name="Run Issue and validate" id="1995f932-e460-4d79-9bf4-e5252f633d85">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties/>
        <con:reportParameters/></con:testCase>
        <con:testCase id="79c4a437-e106-4f13-9408-c09a63c173a1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Renew" searchProperties="true">
            <con:settings/>
            <con:testStep type="calltestcase" name="Run Issue and validate" id="bd29b45e-f6bf-475a-acfc-ac5b1eee7c89">
                <con:settings>
                    <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">
                        1000
                    </con:setting>
                    <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">
                        false
                    </con:setting>
                </con:settings>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:testStep type="groovy" name="Transfert assertion" id="5b73fa35-1e1e-4aa9-89ad-8f1c458683d7">
                <con:settings/>
                <con:config>
                    <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def RUN_ISSUE_AND_VALIDATE_STEP_INDEX = 0
def ISSUE_STEP_INDEX = 0

// Extract assertion element from Issue soap response
def runIssueAndValidateStepResult = testRunner.getResults()[RUN_ISSUE_AND_VALIDATE_STEP_INDEX]
def issueStepResult = runIssueAndValidateStepResult.getMessageExchanges()[ISSUE_STEP_INDEX]
def issueResponseContent = issueStepResult.getResponse().getContentAsXml()
def issueResponseHolder = groovyUtils.getXmlHolder(issueResponseContent)
def assertionNode = issueResponseHolder.getDomNode("//*:Assertion")
log.debug "extracted assertion: " + assertionNode

// Get Renew request xml holder, node and document
def renewRequestHolder = groovyUtils.getXmlHolder("Renew#Request")
def renewTargetNode = renewRequestHolder.getDomNode("//*:RenewTarget")
def requestDocument = renewTargetNode.getOwnerDocument()

//remove potential previous assertion of RenewTarget
while (renewTargetNode.hasChildNodes()) {
        renewTargetNode.removeChild(renewTargetNode.getFirstChild())
}

//import assertion Node into request doucment and insert it.
def newAssertionNode = requestDocument.importNode(assertionNode, true)
renewTargetNode.appendChild(newAssertionNode)

// Propagate request modification
renewRequestHolder.updateProperty()
                    </script>
                </con:config>
            </con:testStep>
            <con:testStep type="request" id="e6d8620e-8f30-4a6f-91a3-983f916602df" name="Renew">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Renew" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="26a9d92e-f2b2-4437-b274-7a6431b92e72">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>   
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Renew</wst:RequestType>       
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
         <wst:RenewTarget><saml2:Assertion ID="ID_e8cabe17-8210-4067-8da8-a3f5d6be0f21" IssueInstant="2020-06-09T08:35:20.621Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">
                  <saml2:Issuer Format="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified">urn:ihe-europe:sts</saml2:Issuer>
                  <dsig:Signature xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
                     <dsig:SignedInfo>
                        <dsig:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                        <dsig:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
                        <dsig:Reference URI="#ID_e8cabe17-8210-4067-8da8-a3f5d6be0f21">
                           <dsig:Transforms>
                              <dsig:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
                              <dsig:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                           </dsig:Transforms>
                           <dsig:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                           <dsig:DigestValue>yEX1qXQbUGdBkSWf4gomQ52UzjM=</dsig:DigestValue>
                        </dsig:Reference>
                     </dsig:SignedInfo>
                     <dsig:SignatureValue>XB9C459Tk/ZjorSF9xd8eUQ2Ry+lmVVtMqqefbzIULaDn+IMBDee5E04rvy72g71b5/cflMtS7GeVDNjG1x5M5UcK0qOzR7cd/ezriaGrg+oGJdtz8d1IgjtGx4JituwOjPYxnVBfXNuI+bBSKuznmsoi9WEXF8zufSjpLv9sqjXX++QdtZOZsdvi688mNnLbW7dZeO13126rRZkRilt2tuV6QQ+leGO7nI1u8p4i8qgJ8CJ7dLLuaQS/MmGThmnJwWtblTveL150TlV7Zc8G4wb4yPWhlIK+ly2Sf3m3l3yvFrBdkhM1EMaLbpEBJ5vw+1/QomtW5+qJJ91YFQyhg==</dsig:SignatureValue>
                     <dsig:KeyInfo>
                        <dsig:X509Data>
                           <dsig:X509Certificate>MIIHhTCCBm2gAwIBAgIEW4oH5DANBgkqhkiG9w0BAQsFADB2MQswCQYDVQQGEwJVUzEQMA4GA1UEChMHRW50cnVzdDEiMCAGA1UECxMZQ2VydGlmaWNhdGlvbiBBdXRob3JpdGllczExMC8GA1UECxMoRW50cnVzdCBORkkgVGVzdCBTaGFyZWQgU2VydmljZSBQcm92aWRlcjAeFw0yMDAzMjcwNzQ0MzJaFw0yMTAzMjcwODE0MzJaMFgxCzAJBgNVBAYTAlVTMQ0wCwYDVQQKEwROSElOMRIwEAYDVQQLEwlOSElOLVRlc3QxJjAkBgNVBAMTHXZhbGlkYXRpb24uc2VxdW9pYXByb2plY3Qub3JnMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsHuzZPtoOlBi4vkSeHBkMHNOH5hg3EJh8y3JovH54jHLjjye0koku7pHWg7pMVq/lLs4BegwRkDZCCVEQSvOTgMd2kHnc973CSXiy/z5GzsR3ngySsDA3TVM7J3xE4hfH36NenoTv8G7IQ3D0E4VVCuWVtNHg9LSOcyrrzHamYwQpD6PF4ldw4DVBkZTc0L1CkNEbcxpxCu2XFWDRC1r3f8MWzbGfOaZVf9w9/oNQePUD7RQvWRiFX9ahInPpZWsEkqCgkVyMqJR2GpAd0YwI8kz3bRS26oX66+cX0djU46veyiyiMeVQjkymdLZTdgllc2b0W9LTbeUvJEZ8aI63QIDAQABo4IENzCCBDMwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjCCAX0GCCsGAQUFBwEBBIIBbzCCAWswVQYIKwYBBQUHMAKGSWh0dHA6Ly9uZml0ZXN0d2ViLm1hbmFnZWQuZW50cnVzdC5jb20vQUlBL0NlcnRzSXNzdWVkVG9ORklNZWRpdW1TU1BDQS5wN2MwgccGCCsGAQUFBzAChoG6bGRhcDovL25maXRlc3RkaXIubWFuYWdlZC5lbnRydXN0LmNvbS9vdT1FbnRydXN0JTIwTkZJJTIwVGVzdCUyMFNoYXJlZCUyMFNlcnZpY2UlMjBQcm92aWRlcixvdT1DZXJ0aWZpY2F0aW9uJTIwQXV0aG9yaXRpZXMsbz1FbnRydXN0LGM9VVM/Y0FDZXJ0aWZpY2F0ZTtiaW5hcnksY3Jvc3NDZXJ0aWZpY2F0ZVBhaXI7YmluYXJ5MEgGCCsGAQUFBzABhjxodHRwOi8vbmZpdGVzdG9jc3AubWFuYWdlZC5lbnRydXN0LmNvbS9PQ1NQL05GSVRlc3RSZXNwb25kZXIwQwYDVR0RBDwwOoITYXNzdXJpdHkuZHluZG5zLm9yZ4IjdmFsaWRhdGlvbi10YW5nby5zZXF1b2lhcHJvamVjdC5vcmcwggGnBgNVHR8EggGeMIIBmjCCAQGggf6ggfuGPGh0dHA6Ly9uZml0ZXN0d2ViLm1hbmFnZWQuZW50cnVzdC5jb20vQ1JMcy9ORklUZXN0U1NQQ0EyLmNybIaBumxkYXA6Ly9uZml0ZXN0ZGlyLm1hbmFnZWQuZW50cnVzdC5jb20vY249V2luQ29tYmluZWQyLG91PUVudHJ1c3QlMjBORkklMjBUZXN0JTIwU2hhcmVkJTIwU2VydmljZSUyMFByb3ZpZGVyLG91PUNlcnRpZmljYXRpb24lMjBBdXRob3JpdGllcyxvPUVudHJ1c3QsYz1VUz9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0O2JpbmFyeTCBkqCBj6CBjKSBiTCBhjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VudHJ1c3QxIjAgBgNVBAsTGUNlcnRpZmljYXRpb24gQXV0aG9yaXRpZXMxMTAvBgNVBAsTKEVudHJ1c3QgTkZJIFRlc3QgU2hhcmVkIFNlcnZpY2UgUHJvdmlkZXIxDjAMBgNVBAMTBUNSTDI2MCsGA1UdEAQkMCKADzIwMjAwMzI3MDc0NDMyWoEPMjAyMTAzMjcwODE0MzJaMB8GA1UdIwQYMBaAFI8Jc8FggvBRsUpDLtsUoJuCygbRMB0GA1UdDgQWBBTRIyqTLTv/eKH1tAzVo12Gg2yAajAJBgNVHRMEAjAAMBkGCSqGSIb2fQdBAAQMMAobBFY4LjMDAgOoMA0GCSqGSIb3DQEBCwUAA4IBAQBSl7AEVS6hePvatC8HjJocXoGSboRTRZTo23Sxp966DIrwUGcNki9yjfQExJgRc3CaE7oHPP2wL0UJvDf63ppiihgWMiQiJpEfmgOG/A1+bvvI2koU0scHuwxg3Bz4qjv0dqEeHGHstDM6nCn8vxRxpzA3T6NgAXQxffdHObCqdTsHzpCDS60zatE0VtWfG15Bbra0/X89mbtXCz2OLpdcmESxEbC6YOkl+MbnyjkbXrBi9fxXk7gaAR3T2KrV/2kiu75VZeZGhlMw/6J/orhCZibMVm5nG+R6NzFqWzT4NdfYdJoo4jCu6/+HivCFOJtkQydFk3UEt1E1qgzOOvQG</dsig:X509Certificate>
                        </dsig:X509Data>
                        <dsig:KeyValue>
                           <dsig:RSAKeyValue>
                              <dsig:Modulus>sHuzZPtoOlBi4vkSeHBkMHNOH5hg3EJh8y3JovH54jHLjjye0koku7pHWg7pMVq/lLs4BegwRkDZCCVEQSvOTgMd2kHnc973CSXiy/z5GzsR3ngySsDA3TVM7J3xE4hfH36NenoTv8G7IQ3D0E4VVCuWVtNHg9LSOcyrrzHamYwQpD6PF4ldw4DVBkZTc0L1CkNEbcxpxCu2XFWDRC1r3f8MWzbGfOaZVf9w9/oNQePUD7RQvWRiFX9ahInPpZWsEkqCgkVyMqJR2GpAd0YwI8kz3bRS26oX66+cX0djU46veyiyiMeVQjkymdLZTdgllc2b0W9LTbeUvJEZ8aI63Q==</dsig:Modulus>
                              <dsig:Exponent>AQAB</dsig:Exponent>
                           </dsig:RSAKeyValue>
                        </dsig:KeyValue>
                     </dsig:KeyInfo>
                  </dsig:Signature>
                  <saml2:Subject>
                     <saml2:NameID NameQualifier="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified">valid</saml2:NameID>
                     <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"/>
                  </saml2:Subject>
                  <saml2:Conditions NotBefore="2020-06-09T08:35:20.621Z" NotOnOrAfter="2020-06-09T10:35:24.621Z">
                     <saml2:AudienceRestriction>
                        <saml2:Audience>https://gazelle.ihe.net</saml2:Audience>
                     </saml2:AudienceRestriction>
                  </saml2:Conditions>
                  <saml2:AuthnStatement AuthnInstant="2020-06-09T08:35:20.621Z">
                     <saml2:AuthnContext>
                        <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
                     </saml2:AuthnContext>
                  </saml2:AuthnStatement>
                  <saml2:AttributeStatement>
                     <saml2:Attribute FriendlyName="XSPA Subject" Name="urn:oasis:names:tc:xspa:1.0:subject:subject-id" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">valid</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute FriendlyName="XSPA Organization" Name="urn:oasis:names:tc:xspa:1.0:subject:organization" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">IHE-Europe</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute FriendlyName="XSPA Organization ID" Name="urn:oasis:names:tc:xspa:1.0:subject:organization-id" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:anyURI" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:oid:1.2.3</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute FriendlyName="XCA Home Community ID" Name="urn:ihe:iti:xca:2010:homeCommunityId" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:anyURI" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:oid:1.2.3.4.5</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute Name="urn:oasis:names:tc:xacml:2.0:subject:role">
                        <saml2:AttributeValue>
                           <Role code="112247003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED_CT" displayName="Medical Doctor" xsi:type="CE" xmlns="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute Name="urn:oasis:names:tc:xspa:1.0:subject:purposeofuse">
                        <saml2:AttributeValue>
                           <PurposeOfUse code="99-101" codeSystem="1.3.6.1.4.1.21367.3000.4.1" codeSystemName="connectathon PurposeOfUse codes" displayName="TREATMENT" xsi:type="CE" xmlns="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </saml2:AttributeValue>
                     </saml2:Attribute>
                  </saml2:AttributeStatement>
               </saml2:Assertion></wst:RenewTarget>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c587c740-1f96-473c-82e0-e11467f13578" name="SOAP Response"/><con:credentials>
          <con:username>${#TestCase#username}</con:username>
          <con:password>${#TestCase#password}</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
        </con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>username</con:name><con:value>valid</con:value></con:property><con:property><con:name>password</con:name><con:value>connectathon</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="67541194-a447-4a35-84d3-025b58fcb0a0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Cancel" searchProperties="true" disabled="true"><con:settings/><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Audience</con:name><con:value>https://gazelle.ihe.net</con:value></con:property></con:properties><con:reportParameters/></con:testSuite>
  
  <con:testSuite id="89e49daa-e325-4f72-8ec3-f49ae1be8bb2" name="IHE Security Token Service">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>

      <con:testCase id="ea5c519e-4ec3-4ed0-89cc-699918fe786a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
          <con:description>Request a valid assertion. It must be Signed and valid for two hours. the Audience
              restriction must have been set from the WS-Addressing request's element.
          </con:description>
          <con:settings/>
          <con:testStep type="calltestcase" name="Run Issue and validate" id="8d1fea19-750a-4699-8c30-09bd67d031c6">
              <con:settings/>
              <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                  <con:properties>
                      <con:property>
                          <con:name>Username</con:name>
                          <con:value>valid</con:value>
                      </con:property>
                      <con:property>
                          <con:name>XPathTest</con:name>
                          <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience</con:value>
                      </con:property>
                      <con:property>
                          <con:name>XPathExpectedResult</con:name>
                          <con:value>${#TestSuite#Audience}</con:value>
                      </con:property>
                      <con:property>
                          <con:name>ExpectedValidationStatus</con:name>
                          <con:value>valid</con:value>
                      </con:property>
                      <con:property>
                          <con:name>ExpectedValidationReason</con:name>
                          <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                      </con:property>
                      <con:property>
                          <con:name>Audience</con:name>
                          <con:value>${#TestSuite#Audience}</con:value>
                      </con:property>
                  </con:properties>
                  <con:returnProperties/>
                  <con:runMode>PARALLELL</con:runMode>
              </con:config>
          </con:testStep>
          <con:properties/>
      <con:reportParameters/></con:testCase>
    <con:testCase id="c52fc1dd-a43c-40d7-ba95-9991ae79bb6b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="unknownaudience" searchProperties="true">
      <con:description>Verify the issued assertion has a modified audience restriction. However, the assertion must still be valid, the service provider is responsible for the audience validation.</con:description><con:settings/>

        <con:testStep type="calltestcase" name="Run Issue and validate" id="3cf648fa-97e1-4274-92c7-54022d55387c">
            <con:settings/>
            <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                <con:properties>
                    <con:property>
                        <con:name>Username</con:name>
                        <con:value>unknownaudience</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathTest</con:name>
                        <con:value>
                            //wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience
                        </con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathExpectedResult</con:name>
                        <con:value>http://ihe.unknown.xua/X-ServiceProvider-IHE-Unknown</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationStatus</con:name>
                        <con:value>valid</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationReason</con:name>
                        <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                    </con:property>
                    <con:property>
                        <con:name>Audience</con:name>
                        <con:value>${#TestSuite#Audience}</con:value>
                    </con:property>
                </con:properties>
                <con:returnProperties/>
                <con:runMode>PARALLELL</con:runMode>
            </con:config>
        </con:testStep>
        <con:properties>
        <con:property>
          <con:name>Username</con:name>
          <con:value>Xuabad</con:value>
        </con:property>
        <con:property>
          <con:name>Validation</con:name>
          <con:value>invalid</con:value>
        </con:property>
        <con:property>
          <con:name>Reason</con:name>
          <con:value>Validation failure: URI of unknown X-Service_Provider in audience restriction</con:value>
        </con:property>
        <con:property>
          <con:name>Xpath</con:name>
          <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience</con:value>
        </con:property>
        <con:property>
          <con:name>XpathResult</con:name>
          <con:value>http://ihe.unknown.xua/X-ServiceProvider-IHE-Unknown</con:value>
        </con:property>
      </con:properties>
    <con:reportParameters/></con:testCase>
    <con:testCase id="0bb641a7-4073-4807-a580-2540c1a52cb8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="notyetvalid" searchProperties="true">
      <con:settings/>

        <con:testStep type="calltestcase" name="Run Issue and validate" id="f867fa77-1eff-43e8-b7cc-3ce6340027b9">
            <con:settings/>
            <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                <con:properties>
                    <con:property>
                        <con:name>Username</con:name>
                        <con:value>notyetvalid</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathTest</con:name>
                        <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion)</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathExpectedResult</con:name>
                        <con:value>true</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationStatus</con:name>
                        <con:value>invalid</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationReason</con:name>
                        <con:value>Validation failure: assertion expired or used before its lifetime period</con:value>
                    </con:property>
                    <con:property>
                        <con:name>Audience</con:name>
                        <con:value>${#TestSuite#Audience}</con:value>
                    </con:property>
                </con:properties>
                <con:returnProperties/>
                <con:runMode>PARALLELL</con:runMode>
            </con:config>
        </con:testStep>
        <con:properties>
        <con:property>
          <con:name>Username</con:name>
          <con:value>notyetvalid</con:value>
        </con:property>
        <con:property>
          <con:name>Validation</con:name>
          <con:value>invalid</con:value>
        </con:property>
        <con:property>
          <con:name>Reason</con:name>
          <con:value>Validation failure: assertion expired or used before its lifetime period</con:value>
        </con:property>
        <con:property>
          <con:name>Xpath</con:name>
          <con:value>boolean(//wst:RequestSecurityTokenResponseCollection)</con:value>
        </con:property>
        <con:property>
          <con:name>XpathResult</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
    <con:reportParameters/></con:testCase>
    <con:testCase id="a3082f8a-c7a8-4401-8d62-0d8c648e42b0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="expired" searchProperties="true">
      <con:settings/>

        <con:testStep type="calltestcase" name="Run Issue and validate" id="4d1c3412-f3db-4f09-b590-29c7e5a7e369">
            <con:settings/>
            <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                <con:properties>
                    <con:property>
                        <con:name>Username</con:name>
                        <con:value>expired</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathTest</con:name>
                        <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion)</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathExpectedResult</con:name>
                        <con:value>true</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationStatus</con:name>
                        <con:value>invalid</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationReason</con:name>
                        <con:value>Validation failure: assertion expired or used before its lifetime period</con:value>
                    </con:property>
                    <con:property>
                        <con:name>Audience</con:name>
                        <con:value>${#TestSuite#Audience}</con:value>
                    </con:property>
                </con:properties>
                <con:returnProperties/>
                <con:runMode>PARALLELL</con:runMode>
            </con:config>
        </con:testStep>
        <con:properties>
        <con:property>
          <con:name>Username</con:name>
          <con:value>expired</con:value>
        </con:property>
        <con:property>
          <con:name>Validation</con:name>
          <con:value>invalid</con:value>
        </con:property>
        <con:property>
          <con:name>Reason</con:name>
          <con:value>Validation failure: assertion expired or used before its lifetime period</con:value>
        </con:property>
        <con:property>
          <con:name>Xpath</con:name>
          <con:value>boolean(//wst:RequestSecurityTokenResponseCollection)</con:value>
        </con:property>
        <con:property>
          <con:name>XpathResult</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
    <con:reportParameters/></con:testCase>
    <con:testCase id="c4e240c0-1dcd-4362-9dbf-60fda196ff58" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="unsigned" searchProperties="true">
      <con:settings/>


        <con:testStep type="calltestcase" name="Run Issue and validate" id="9e0c69c9-3573-4be1-8d2a-fcc86ae1d1bb">
            <con:settings/>
            <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                <con:properties>
                    <con:property>
                        <con:name>Username</con:name>
                        <con:value>unsigned</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathTest</con:name>
                        <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathExpectedResult</con:name>
                        <con:value>false</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationStatus</con:name>
                        <con:value>invalid</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationReason</con:name>
                        <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find Signature element</con:value>
                    </con:property>
                    <con:property>
                        <con:name>Audience</con:name>
                        <con:value>${#TestSuite#Audience}</con:value>
                    </con:property>
                </con:properties>
                <con:returnProperties/>
                <con:runMode>PARALLELL</con:runMode>
            </con:config>
        </con:testStep>
        <con:properties>
        <con:property>
          <con:name>Username</con:name>
          <con:value>unsigned</con:value>
        </con:property>
        <con:property>
          <con:name>Validation</con:name>
          <con:value>invalid</con:value>
        </con:property>
        <con:property>
          <con:name>Reason</con:name>
          <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find Signature element</con:value>
        </con:property>
        <con:property>
          <con:name>Xpath</con:name>
          <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
        </con:property>
        <con:property>
          <con:name>XpathResult</con:name>
          <con:value>false</con:value>
        </con:property>
      </con:properties>
    <con:reportParameters/></con:testCase>
      <con:testCase id="0c493da2-f80f-4567-b6c4-56a01d2b3827" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidsignature" searchProperties="true">
          <con:settings/>


          <con:testStep type="calltestcase" name="Run Issue and validate" id="d745bf8f-c5a6-4db8-a4b9-abe3f066e0ad">
              <con:settings/>
              <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                  <con:properties>
                      <con:property>
                          <con:name>Username</con:name>
                          <con:value>invalidsignature</con:value>
                      </con:property>
                      <con:property>
                          <con:name>XPathTest</con:name>
                          <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                      </con:property>
                      <con:property>
                          <con:name>XPathExpectedResult</con:name>
                          <con:value>true</con:value>
                      </con:property>
                      <con:property>
                          <con:name>ExpectedValidationStatus</con:name>
                          <con:value>invalid</con:value>
                      </con:property>
                      <con:property>
                          <con:name>ExpectedValidationReason</con:name>
                          <con:value>Validation failure: digital signature is invalid</con:value>
                      </con:property>
                      <con:property>
                          <con:name>Audience</con:name>
                          <con:value>${#TestSuite#Audience}</con:value>
                      </con:property>
                  </con:properties>
                  <con:returnProperties/>
                  <con:runMode>PARALLELL</con:runMode>
              </con:config>
          </con:testStep>
          <con:properties>
              <con:property>
                  <con:name>Username</con:name>
                  <con:value>unsigned</con:value>
              </con:property>
              <con:property>
                  <con:name>Validation</con:name>
                  <con:value>invalid</con:value>
              </con:property>
              <con:property>
                  <con:name>Reason</con:name>
                  <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find
                      Signature element
                  </con:value>
              </con:property>
              <con:property>
                  <con:name>Xpath</con:name>
                  <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
              </con:property>
              <con:property>
                  <con:name>XpathResult</con:name>
                  <con:value>false</con:value>
              </con:property>
          </con:properties>
      <con:reportParameters/></con:testCase>


      <con:testCase id="d474ebfc-e7ac-4fdb-b5aa-28890e32d191" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidauthncontext" searchProperties="true">
      <con:settings/>

        <con:testStep type="calltestcase" name="Run Issue and validate" id="d2040990-b5a0-4a32-970c-c04df765fd8f">
            <con:settings/>
            <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                <con:properties>
                    <con:property>
                        <con:name>Username</con:name>
                        <con:value>invalidauthncontext</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathTest</con:name>
                        <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:AuthnStatement/saml2:AuthnContext/saml2:AuthnContextClassRef</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathExpectedResult</con:name>
                        <con:value>urn:oasis:names:tc:SAML:2.0:ac:classes:Invalid</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationStatus</con:name>
                        <con:value>invalid</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationReason</con:name>
                        <con:value>Validation failure: invalid AuthnStatement parameter</con:value>
                    </con:property>
                    <con:property>
                        <con:name>Audience</con:name>
                        <con:value>${#TestSuite#Audience}</con:value>
                    </con:property>
                </con:properties>
                <con:returnProperties/>
                <con:runMode>PARALLELL</con:runMode>
            </con:config>
        </con:testStep>
        <con:properties>
        <con:property>
          <con:name>Username</con:name>
          <con:value>invalidauthncontext</con:value>
        </con:property>
        <con:property>
          <con:name>Validation</con:name>
          <con:value>invalid</con:value>
        </con:property>
        <con:property>
          <con:name>Reason</con:name>
          <con:value>Validation failure: invalid AuthnStatement parameter</con:value>
        </con:property>
        <con:property>
          <con:name>Xpath</con:name>
          <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:AuthnStatement/saml2:AuthnContext/saml2:AuthnContextClassRef</con:value>
        </con:property>
        <con:property>
          <con:name>XpathResult</con:name>
          <con:value>urn:oasis:names:tc:SAML:2.0:ac:classes:Invalid</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/></con:testCase>
      <con:testCase id="8cbf66b5-14eb-4fd0-ad9a-1fc223e44fc4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="secondauthncontext" searchProperties="true">
      <con:settings/>

        <con:testStep type="calltestcase" name="Run Issue and validate" id="645d8108-9216-467b-8c70-25cd769aa699">
            <con:settings/>
            <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                <con:properties>
                    <con:property>
                        <con:name>Username</con:name>
                        <con:value>secondauthncontext</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathTest</con:name>
                        <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:AuthnStatement/saml2:AuthnContext/saml2:AuthnContextClassRef</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathExpectedResult</con:name>
                        <con:value>urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationStatus</con:name>
                        <con:value>invalid</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationReason</con:name>
                        <con:value>Validation failure: AuthnContextClassRef is 'InternetProtocol' which 'policy' says is an unacceptable authentication method</con:value>
                    </con:property>
                    <con:property>
                        <con:name>Audience</con:name>
                        <con:value>${#TestSuite#Audience}</con:value>
                    </con:property>
                </con:properties>
                <con:returnProperties/>
                <con:runMode>PARALLELL</con:runMode>
            </con:config>
        </con:testStep>
        <con:properties>
        <con:property>
          <con:name>Username</con:name>
          <con:value>secondauthncontext</con:value>
        </con:property>
        <con:property>
          <con:name>Validation</con:name>
          <con:value>invalid</con:value>
        </con:property>
        <con:property>
          <con:name>Reason</con:name>
          <con:value>Validation failure: AuthnContextClassRef is 'InternetProtocol' which 'policy' says is an unacceptable authentication method</con:value>
        </con:property>
        <con:property>
          <con:name>Xpath</con:name>
          <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:AuthnStatement/saml2:AuthnContext/saml2:AuthnContextClassRef</con:value>
        </con:property>
        <con:property>
          <con:name>XpathResult</con:name>
          <con:value>urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/></con:testCase>
      <con:testCase id="6e8bf8fd-06ec-4592-bbc8-c23b904c63e5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="secondrole" searchProperties="true">
      <con:settings/>

          <con:testStep type="calltestcase" name="Run Issue and validate" id="21e6cbb8-287e-4f61-9d35-67dafad3b3d9">
              <con:settings/>
              <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                  <con:properties>
                      <con:property>
                          <con:name>Username</con:name>
                          <con:value>secondrole</con:value>
                      </con:property>
                      <con:property>
                          <con:name>XPathTest</con:name>
                          <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:AttributeStatement/saml2:Attribute[@Name='urn:oasis:names:tc:xacml:2.0:subject:role']/saml2:AttributeValue/hl7:Role/@displayName                           </con:value>
                      </con:property>
                      <con:property>
                          <con:name>XPathExpectedResult</con:name>
                          <con:value>Social Worker</con:value>
                      </con:property>
                      <con:property>
                          <con:name>ExpectedValidationStatus</con:name>
                          <con:value>invalid</con:value>
                      </con:property>
                      <con:property>
                          <con:name>ExpectedValidationReason</con:name>
                          <con:value>Validation failure: current role cannot provide any access</con:value>
                      </con:property>
                      <con:property>
                          <con:name>Audience</con:name>
                          <con:value>${#TestSuite#Audience}</con:value>
                      </con:property>
                  </con:properties>
                  <con:returnProperties/>
                  <con:runMode>PARALLELL</con:runMode>
              </con:config>
          </con:testStep>
          <con:properties>
              <con:property>
                  <con:name>Username</con:name>
                  <con:value>secondrole</con:value>
              </con:property>
        <con:property>
          <con:name>Validation</con:name>
          <con:value>invalid</con:value>
        </con:property>
        <con:property>
          <con:name>Reason</con:name>
          <con:value>Validation failure: current role cannot provide any access</con:value>
        </con:property>
        <con:property>
          <con:name>Xpath</con:name>
          <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:AttributeStatement/saml2:Attribute[@Name='urn:oasis:names:tc:xacml:2.0:subject:role']/saml2:AttributeValue/hl7:Role/@displayName</con:value>
        </con:property>
        <con:property>
          <con:name>XpathResult</con:name>
          <con:value>Social Worker</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/></con:testCase>
      <con:testCase id="d01c2aff-1893-474e-af00-631e94b6b8b8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="secondpurposeofuse" searchProperties="true">
      <con:settings/>

          <con:testStep type="calltestcase" name="Run Issue and validate" id="472e11c4-23e7-430b-acdf-296058839ab3">
              <con:settings/>
              <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                  <con:properties>
                      <con:property>
                          <con:name>Username</con:name>
                          <con:value>secondpurposeofuse</con:value>
                      </con:property>
                      <con:property>
                          <con:name>XPathTest</con:name>
                          <con:value>
                              //wst:RequestedSecurityToken/saml2:Assertion/saml2:AttributeStatement/saml2:Attribute[@Name='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse']/saml2:AttributeValue/hl7:PurposeOfUse/@displayName
                          </con:value>
                      </con:property>
                      <con:property>
                          <con:name>XPathExpectedResult</con:name>
                          <con:value>RESEARCH</con:value>
                      </con:property>
                      <con:property>
                          <con:name>ExpectedValidationStatus</con:name>
                          <con:value>invalid</con:value>
                      </con:property>
                      <con:property>
                          <con:name>ExpectedValidationReason</con:name>
                          <con:value>Validation failure: current purposeofuse cannot provide any access</con:value>
                      </con:property>
                      <con:property>
                          <con:name>Audience</con:name>
                          <con:value>${#TestSuite#Audience}</con:value>
                      </con:property>
                  </con:properties>
                  <con:returnProperties/>
                  <con:runMode>PARALLELL</con:runMode>
              </con:config>
          </con:testStep>
          <con:properties>
              <con:property>
                  <con:name>Username</con:name>
                  <con:value>secondpurposeofuse</con:value>
              </con:property>
        <con:property>
          <con:name>Validation</con:name>
          <con:value>invalid</con:value>
        </con:property>
        <con:property>
          <con:name>Reason</con:name>
          <con:value>Validation failure: current purposeofuse cannot provide any access</con:value>
        </con:property>
        <con:property>
          <con:name>Xpath</con:name>
          <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:AttributeStatement/saml2:Attribute[@Name='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse']/saml2:AttributeValue/hl7:PurposeOfUse/@displayName</con:value>
        </con:property>
        <con:property>
          <con:name>XpathResult</con:name>
          <con:value>RESEARCH</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/></con:testCase>
      <con:testCase id="b1bb913a-1f3b-48f9-9d8e-dd13781b130b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="withauthzconsent" searchProperties="true">
      <con:settings/>

        <con:testStep type="calltestcase" name="Run Issue and validate" id="ec9b2f1d-1218-4154-acc1-9d399f246c82">
            <con:settings/>
            <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                <con:properties>
                    <con:property>
                        <con:name>Username</con:name>
                        <con:value>withauthzconsent</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathTest</con:name>
                        <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:AttributeStatement/saml2:Attribute[@Name="urn:ihe:iti:bppc:2007:docid"])                             and                             boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:AttributeStatement/saml2:Attribute[@Name="urn:oasis:names:tc:xacml:2.0:resource:resource-id"])</con:value>
                    </con:property>
                    <con:property>
                        <con:name>XPathExpectedResult</con:name>
                        <con:value>true</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationStatus</con:name>
                        <con:value>valid</con:value>
                    </con:property>
                    <con:property>
                        <con:name>ExpectedValidationReason</con:name>
                        <con:value>SAMLV2.0 Assertion successfuly validated (WITH Authz-Consent option)</con:value>
                    </con:property>
                    <con:property>
                        <con:name>Audience</con:name>
                        <con:value>${#TestSuite#Audience}</con:value>
                    </con:property>
                </con:properties>
                <con:returnProperties/>
                <con:runMode>PARALLELL</con:runMode>
            </con:config>
        </con:testStep>
        <con:properties>
        <con:property>
          <con:name>Username</con:name>
          <con:value>withauthzconsent</con:value>
        </con:property>
        <con:property>
          <con:name>Validation</con:name>
          <con:value>valid</con:value>
        </con:property>
        <con:property>
          <con:name>Reason</con:name>
          <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
        </con:property>
        <con:property>
          <con:name>Xpath</con:name>
          <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:AttributeStatement/saml2:Attribute/@Name</con:value>
        </con:property>
        <con:property>
          <con:name>XpathResult</con:name>
          <con:value>urn:oasis:names:tc:xacml:2.0:resource:resource-id</con:value>
        </con:property>
      </con:properties>
    <con:reportParameters/></con:testCase><con:properties>
      <con:property>
        <con:name>Audience</con:name>
        <con:value>http://ihe.connectathon.xua/X-ServiceProvider-IHE-Connectathon</con:value>
      </con:property>
    </con:properties>
  <con:reportParameters/></con:testSuite>
    <con:testSuite id="266e16f6-c434-4f75-b07d-f05d9015ee48" name="Sequoia Security Token Service">
        <con:settings/>
        <con:runType>SEQUENTIAL</con:runType>
        <con:testCase id="d13c0eb7-e0b0-4488-8138-ccdd4fed18e8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="valid" searchProperties="true">
            <con:settings/>
            <con:testStep type="calltestcase" name="Issue and validate" id="b773f042-f198-49db-8326-cc955116c8b9">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties/>
        <con:reportParameters/></con:testCase>
        <con:testCase id="1ad212e7-ebb5-4b08-bae1-8577aee04e4c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidsignature" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate" id="cd04b637-ddcf-4cdb-8ad4-3a5eec8863aa">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>invalidsignature</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>true</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>invalid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>Validation failure: digital signature is invalid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>unsigned</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>Reason</con:name>
                    <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find
                        Signature element
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>false</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="624a1f83-c191-4732-b9d1-bddf770f7950" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingkeyinfo" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate" id="b05a8fee-6664-4118-b4c1-1bea7a399cb1" disabled="true">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>missingkeyinfo</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>false</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>invalid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find X509Certificate element, RSAKeyValue element or DSAKeyValue element in Signature</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:testStep type="request" id="513bf1b0-b68a-40fd-b524-5499b7b2c6bd" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep><con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>missingkeyinfo</con:value>
                </con:property>
                
                
                <con:property>
                    <con:name>XpathTest</con:name>
                    <con:value>                         boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo)                     </con:value>
                </con:property>
                <con:property>
                    <con:name>XpathExpectedResult</con:name>
                    <con:value>false</con:value>
                </con:property>
            <con:property><con:name>Audience</con:name><con:value>${#TestSuite#Audience}</con:value></con:property></con:properties>
        <con:reportParameters/></con:testCase>


        <con:testCase id="62f35def-85c3-4482-8099-22becf8f8d3d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingkeyvalue" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="7b74b33b-053f-4202-b09d-fcbe4b7d83c1" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>missingkeyvalue</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>                         boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:KeyValue)                     </con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>false</con:value>
                </con:property>


                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="666ff094-bdb6-445b-932d-9d79a9ba2cae" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingrsakeyvalue" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate" id="c6d75696-4c4e-4755-80f3-6f285c18d988">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>missingrsakeyvalue</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>
                                boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue)
                            </con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>false</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>invalid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>Validation failure: unable to verify digital signature: null</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>unsigned</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>Reason</con:name>
                    <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find
                        Signature element
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>false</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="f20a4655-87af-400b-b03d-9769211abe84" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingrsakeymodulus" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate" id="0cae9f4b-8322-4fd3-a35f-db0000aa622f">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>missingrsakeymodulus</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>
                                boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:RSAKeyValue/ds:Modulus)
                            </con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>false</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>invalid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>Validation failure: unable to verify digital signature: null</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>unsigned</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>Reason</con:name>
                    <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find
                        Signature element
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>false</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="acfee0aa-93ef-4972-b704-027af3269516" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingrsakeyexponent" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate" id="af354537-eea2-4cef-b9df-ed4cfceaf69d">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>missingrsakeyexponent</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>
                                boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:RSAKeyValue/ds:Exponent)
                            </con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>false</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>invalid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>Validation failure: unable to verify digital signature: null</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>unsigned</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>Reason</con:name>
                    <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find
                        Signature element
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>false</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="ddb20b98-d704-45e8-9f83-e9060baf9fa0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingsubjectconfirmation" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate" id="e0a62d3c-5087-4056-adbf-bd4068321153">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>missingsubjectconfirmation</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:Subject/saml2:SubjectConfirmation)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>false</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>unsigned</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>Reason</con:name>
                    <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find
                        Signature element
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>false</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="9d903140-1e3c-47ff-be4f-0d456997f642" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidversion" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="32288d46-c4f1-4ce4-a96d-ed13e79318a6" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidversion</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/@Version</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>1.9</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="ef0b7a46-6652-4292-86c6-895ae395fddd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingversion" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="448bd214-58af-4231-83eb-f45644e2f7db" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>missingversion</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/@Version)</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>false</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="3e872882-649d-423f-8eac-eb246fd3ea09" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingid" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="95b18a40-844d-4161-b3a1-f70e06f50c43" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>missingid</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/@ID)</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>false</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="f9b3f5fa-d697-42af-b21f-cd7563f1726f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidid" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="f0d7c351-fbd9-4e3c-8c6e-e7df1e17e3a9" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidid</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/@ID</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>testID</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="bc12daf3-277d-41fe-96d1-9c79981988d3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingissueinstant" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="b5b49949-76f9-4dac-b30d-5eb1a6115980" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>missingissueinstant</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/@IssueInstant)</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>false</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="185eda94-105d-4850-a4f2-1afbfb1aea0a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidissueinstant" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="79617ddf-39ae-4d1e-90ed-be4f9a1bec6f" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidissueinstant</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/@IssueInstant</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>testIssueInstant</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="ef4ee28f-2b83-49fd-86ab-0be62a46eccb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="lateissueinstant" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate" id="ff43274b-f2ea-4e4b-b945-6f91d6236245">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>lateissueinstant</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>//wst:RequestedSecurityToken/saml2:Assertion/@IssueInstant</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>2117-06-16T14:03:18.064Z</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>unsigned</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>Reason</con:name>
                    <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find
                        Signature element
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>false</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="c814a8df-63c0-48b2-9622-b7ed054cfbe9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingissuer" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate" id="729e0ff5-19bb-427c-af1e-43cd9a537eb3">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>missingissuer</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:Issuer)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>false</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>unsigned</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>Reason</con:name>
                    <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find
                        Signature element
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>false</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="2181f148-4deb-465e-81a3-7d25c6e0257a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingissuerformat" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="69360b43-af96-4849-a409-d377ff2cb66d" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>	]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration><path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}</path><content>${#TestCase#XPathExpectedResult}</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>missingissuerformat</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:Issuer/@Format)</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>false</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling assertion</con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="f6f0cc09-472d-4a1d-9769-6cac22bb502d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidissueremailformat" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="c6b6f760-ce14-4aeb-848a-cfb4b98419fb" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>	]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Invalid email">
                            <con:configuration>
                                <scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
                                    def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )

                                    def issuer = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Issuer"]

                                    assert !issuer.contains("@"), "Issuer should be an invalid email"
                                </scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidissueremailformat</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Issuer/@Format</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="37a384e8-8bb6-47e8-91e6-8cb1e3c9bb32" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidissuerx509format" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="56461c5e-4949-4b36-a21b-61f535baea65" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>	]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Invalid distinguish name">
                            <con:configuration>
                                <scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
                                    def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )

                                    def issuer = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Issuer"]

                                    assert !issuer.contains("CN="), "Issuer should be an invalid distinguish name"
                                </scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidissuerx509format</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Issuer/@Format</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="0145e2d2-4946-4798-8f55-9732e1e399b4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidissuerwindowsdomainformat" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="e633e203-e09b-4413-9ebe-5b538fa21980" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>	]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration><path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}</path><content>${#TestCase#XPathExpectedResult}</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Invalid windows domaine qualified name">
                            <con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
                                    def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )

                                    def issuer = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Issuer"]

                                    assert !issuer.matches("((\\w+)\\\\)?(\\w+)"),
                                    "Issuer should be an invalid Windows Domaine Qualified Name"
                                </scriptText></con:configuration>
                        </con:assertion>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match Issuer">
                            <con:configuration><path>declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512'
//wst:RequestedSecurityToken/saml2:Assertion/saml2:Issuer</path><content>.NotValidWindowsDomain.QualifierName?</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
                        </con:assertion><con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidissuerwindowsdomainformat</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Issuer/@Format</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="2d5633f0-f353-4ad8-920e-866c2d72b9c4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingsubject" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate" id="c87cf0c3-e245-4075-8e4c-30f65ab29a98">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>missingsubject</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:Subject)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>false</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>unsigned</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>Reason</con:name>
                    <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find
                        Signature element
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>false</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase><con:testCase id="2a601bdc-9fd9-4fdd-9db7-e89254901138" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidrsapublickeymodulus" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="457ffba3-5dba-416f-9d70-04c4e0cd516b" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidrsapublickeymodulus</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue/ds:Modulus</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>testModulus</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling                         assertion                     </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase><con:testCase id="2e6895f2-6059-4370-ac79-c2f19903afe7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidrsapublickeyexponent" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="c1d76143-5e46-4ebb-a5e2-07d97189bf3d" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidrsapublickeyexponent</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue/ds:Exponent</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>testExponent</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling assertion</con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase><con:testCase id="b7e2d048-2a89-45ef-8ef9-1d6250935f9c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidx509certificate" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="7b5212b1-3a7b-41e9-b86a-9a30c905a91f" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidx509certificate</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:X509Data/ds:X509Certificate</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>testX509Certificate</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling assertion</con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase><con:testCase id="ca7fdb6e-f922-4f61-a348-3fcee81da60a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingsubjectnameid" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate" id="5d25fa1e-fb6c-4890-abc9-d0a6839c6d56">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>missingsubjectnameid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:Subject/saml2:NameID)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>false</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>unsigned</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>Reason</con:name>
                    <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find
                        Signature element
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature)</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>false</con:value>
                </con:property>
            </con:properties>
    <con:reportParameters/></con:testCase>
        <con:testCase id="d342579e-06b2-4d35-a904-36c78dc76462" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidsubjectnameidformat" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="1d707d00-efda-4bae-af9b-d0c55884ebd0" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidsubjectnameidformat</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Subject/saml2:NameID/@Format
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>testFormat</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase><con:testCase id="cbc2ac49-6cdf-436e-85e6-fc9d37b4ed5c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingsubjectconfirmationmethod" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="9a8c6b71-81bc-465e-963d-70266f223b76" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>missingsubjectconfirmationmethod</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:Subject/saml2:SubjectConfirmation/@Method)</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>false</con:value>
                </con:property>


                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
    <con:reportParameters/></con:testCase>
        <con:testCase id="3d605966-fb00-4694-88e6-94b01e3b9969" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingsubjectconfirmationdata" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="b9ebdcb6-6e47-4f4a-b368-6220a57307e9" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>missingsubjectconfdata</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>
                        boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:Subject/saml2:SubjectConfirmation/saml2:SubjectConfirmationData)
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>false</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="f7dbfb63-c5ff-448b-a98b-a92173c726be" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingsubjectconfirmationkeyinfo" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="5e37f99f-362f-4dad-9972-86d8cc932252" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>missingsubjectconfirmationkeyinfo</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>                         boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:Subject/saml2:SubjectConfirmation/saml2:SubjectConfirmationData/ds:KeyInfo)                     </con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>false</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="a0874416-8ed5-4b2f-811f-a74366ddc729" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missingsubjectconfrsapublickeyexponent" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="2e6bf447-b323-47ff-9642-09ec3529c339" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>missingsubjectconfrsapublickeyexponent</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>
                        boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:Subject/saml2:SubjectConfirmation/saml2:SubjectConfirmationData/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue/ds:Exponent)
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>false</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="435ea973-9f67-416b-8d0a-c98788042e1f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidsubjectconfrsapublickeymodulus" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="5f3f4e55-297e-4aed-a731-d6595da7d35d" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidsubjectconfrsapublickeymodulus</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Subject/saml2:SubjectConfirmation/saml2:SubjectConfirmationData/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue/ds:Modulus</con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>testModulus</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling                         assertion                     </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="90c3d0bd-5a54-45a1-8620-d5b77b439339" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidsubjectconfrsapublickeyexponent" searchProperties="true">
            <con:settings/>


            <con:testStep type="request" id="3ddfcf06-1f9b-4f0a-92e3-9a5926ff9826" name="Issue">
                <con:settings/>
                <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:interface>STSBinding</con:interface>
                    <con:operation>IssueToken</con:operation>
                    <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true
                            </con:setting>
                            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting>
                        </con:settings>
                        <con:encoding>UTF-8</con:encoding>
                        <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
                        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
                        <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
                        <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
                            <con:configuration>
                                <path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
                                    declare namespace
                                    wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
                                    declare namespace
                                    wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
                                    declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                                    declare namespace
                                    wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
                                    declare namespace ns1='urn:hl7-org:v3';
                                    declare namespace xs='http://www.w3.org/2001/XMLSchema';
                                    declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
                                    declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns2='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    declare namespace wsa='http://www.w3.org/2005/08/addressing';
                                    declare namespace hl7="urn:hl7-org:v3";
                                    ${#TestCase#XPathTest}
                                </path>
                                <content>${#TestCase#XPathExpectedResult}</content>
                                <allowWildcards>true</allowWildcards>
                                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                                <ignoreComments>false</ignoreComments>
                            </con:configuration>
                        </con:assertion>
                        <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
                            <con:configuration>
                                <scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:username>${#TestCase#Username}</con:username>
                            <con:password>connectathon</con:password>
                            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
                            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
                            <con:authType>Global HTTP Settings</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
                        <con:wsrmConfig version="1.2"/>
                    </con:request>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>invalidsubjectconfrsapublickeyexponent</con:value>
                </con:property>


                <con:property>
                    <con:name>XPathTest</con:name>
                    <con:value>                         //wst:RequestedSecurityToken/saml2:Assertion/saml2:Subject/saml2:SubjectConfirmation/saml2:SubjectConfirmationData/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue/ds:Exponent                     </con:value>
                </con:property>
                <con:property>
                    <con:name>XPathExpectedResult</con:name>
                    <con:value>testExponent</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationStatus</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>ExpectedValidationReason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling
                        assertion
                    </con:value>
                </con:property>
                <con:property>
                    <con:name>Audience</con:name>
                    <con:value>${#TestSuite#Audience}</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase><con:testCase id="ad3db9d3-d60d-4ad1-a5ad-a89a12f898fd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="acpvalid" searchProperties="true">
            <con:settings/>
            <con:testStep type="calltestcase" name="Issue and validate" id="9fafadd9-3047-4c45-9ff9-c3454eb5bd98">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>02cebd89-e8da-493a-8a9c-decdee26ffa5</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>acpvalid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/saml2:AuthzDecisionStatement/saml2:Evidence/saml2:Assertion)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>true</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties/>
        <con:reportParameters/></con:testCase><con:testCase id="18a29bce-d1ff-489a-bb16-27dd3f7dc5eb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidconditions" searchProperties="true">
      <con:settings/>


      <con:testStep type="request" id="0ecd5a10-9884-49fc-9975-efe1973a03ff" name="validate">
        <con:settings/>
          <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>STSBinding</con:interface>
          <con:operation>IssueToken</con:operation>
          <con:request name="validate" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="f2d16044-b063-4a9a-a89a-d08b6e06517f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">false</con:setting></con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Validate</wst:RequestType>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
         <wst:ValidateTarget>
            <saml2:Assertion ID="_19806619-374c-463a-bd28-7ce7ac8372ac" IssueInstant="2020-04-07T23:35:07.528Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:urn="urn:hl7-org:v3" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
               <saml2:Issuer Format="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress">support@nextgen.com</saml2:Issuer>
               <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
                  <ds:SignedInfo>
                     <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                     <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
                     <ds:Reference URI="#_19806619-374c-463a-bd28-7ce7ac8372ac">
                        <ds:Transforms>
                           <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
                           <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                              <ec:InclusiveNamespaces PrefixList="xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                           </ds:Transform>
                        </ds:Transforms>
                        <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                        <ds:DigestValue>9LMWecArGmd+RG0cyJE34sObm2I=</ds:DigestValue>
                     </ds:Reference>
                  </ds:SignedInfo>
                  <ds:SignatureValue>APYRsw9z/6fLKvhLT6T4wF65HZgX+I3R9aoY+dGaSNgDPgGjBgcr8A5V+rnUDdd4SptyX/nuGMXxIEP/93duA0/nM4LcHrBTnNByKY8zzuOgfhW8jsPe+9jCy1BmBvQUU3JUSIvQEoKHgYZTpE0NyaJZCs3/b8cenUaxw8HnZvJzl8zBNxv4c+OpPMB3ghyZMDnUn7emfOK1aLlfUKEVWbAGIW3rrEThsvVbBcuFQCRC1V93yqQBxNwf9b27sbIuPTk21IRcwEZs27AWPnsfEqf8oDPtS27bn2R4Lx48culkNfHhJBwZurJb2jDDJZXMLhLuHaf8BEoLLFxQqPtbSQ==</ds:SignatureValue>
                  <ds:KeyInfo>
                     <ds:KeyValue>
                        <ds:RSAKeyValue>
                           <ds:Modulus>wVWsFatpYllnRF/PS09NvMqX9l6yA8PgOpNexpZGvk9HXE/8YZtBCystKDurmkGUJaHHD/86CkVI
KEzp2F9dNlMDlg2hmtKvlpdfLpAO4Myh36WPr3vwzl5IiBwhRMYbFvLomWbqGHYqVLA6sRZOQZSv
FteB8jEmlSqUhMddcitlVF0VZ04JkLmXTlPIOW5IMgcmMvij6OWt7LbXQqGCmqcWggxVBUQS22Sz
5tbsMpkxucbhSQac3VF7RtONmRn4fJRDaDNDNgku2WAp3rKZwb3eqr7PYCjzGF92+b9O5E7pM6UL
Vh3sCCgqxkKAxViYp6p8+eTI9d0IV3dxUqsbcQ==</ds:Modulus>
                           <ds:Exponent>AQAB</ds:Exponent>
                        </ds:RSAKeyValue>
                     </ds:KeyValue>
                     <ds:X509Data>
                        <ds:X509Certificate>MIIHQDCCBiigAwIBAgIEW4oABDANBgkqhkiG9w0BAQsFADB2MQswCQYDVQQGEwJVUzEQMA4GA1UE
ChMHRW50cnVzdDEiMCAGA1UECxMZQ2VydGlmaWNhdGlvbiBBdXRob3JpdGllczExMC8GA1UECxMo
RW50cnVzdCBORkkgVGVzdCBTaGFyZWQgU2VydmljZSBQcm92aWRlcjAeFw0yMDAzMDMxNTQxMDNa
Fw0yMTAzMDMxNjExMDNaMFgxCzAJBgNVBAYTAnVzMQ0wCwYDVQQKEwROSElOMRIwEAYDVQQLEwlO
SElOLVRlc3QxJjAkBgNVBAMTHW1jLXFyLWVoeC1wcm9kLmxhbmVzbGFzeXMub3JnMIIBIjANBgkq
hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwVWsFatpYllnRF/PS09NvMqX9l6yA8PgOpNexpZGvk9H
XE/8YZtBCystKDurmkGUJaHHD/86CkVIKEzp2F9dNlMDlg2hmtKvlpdfLpAO4Myh36WPr3vwzl5I
iBwhRMYbFvLomWbqGHYqVLA6sRZOQZSvFteB8jEmlSqUhMddcitlVF0VZ04JkLmXTlPIOW5IMgcm
Mvij6OWt7LbXQqGCmqcWggxVBUQS22Sz5tbsMpkxucbhSQac3VF7RtONmRn4fJRDaDNDNgku2WAp
3rKZwb3eqr7PYCjzGF92+b9O5E7pM6ULVh3sCCgqxkKAxViYp6p8+eTI9d0IV3dxUqsbcQIDAQAB
o4ID8jCCA+4wDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjCC
AX0GCCsGAQUFBwEBBIIBbzCCAWswVQYIKwYBBQUHMAKGSWh0dHA6Ly9uZml0ZXN0d2ViLm1hbmFn
ZWQuZW50cnVzdC5jb20vQUlBL0NlcnRzSXNzdWVkVG9ORklNZWRpdW1TU1BDQS5wN2MwgccGCCsG
AQUFBzAChoG6bGRhcDovL25maXRlc3RkaXIubWFuYWdlZC5lbnRydXN0LmNvbS9vdT1FbnRydXN0
JTIwTkZJJTIwVGVzdCUyMFNoYXJlZCUyMFNlcnZpY2UlMjBQcm92aWRlcixvdT1DZXJ0aWZpY2F0
aW9uJTIwQXV0aG9yaXRpZXMsbz1FbnRydXN0LGM9VVM/Y0FDZXJ0aWZpY2F0ZTtiaW5hcnksY3Jv
c3NDZXJ0aWZpY2F0ZVBhaXI7YmluYXJ5MEgGCCsGAQUFBzABhjxodHRwOi8vbmZpdGVzdG9jc3Au
bWFuYWdlZC5lbnRydXN0LmNvbS9PQ1NQL05GSVRlc3RSZXNwb25kZXIwggGnBgNVHR8EggGeMIIB
mjCCAQGggf6ggfuGPGh0dHA6Ly9uZml0ZXN0d2ViLm1hbmFnZWQuZW50cnVzdC5jb20vQ1JMcy9O
RklUZXN0U1NQQ0EyLmNybIaBumxkYXA6Ly9uZml0ZXN0ZGlyLm1hbmFnZWQuZW50cnVzdC5jb20v
Y249V2luQ29tYmluZWQyLG91PUVudHJ1c3QlMjBORkklMjBUZXN0JTIwU2hhcmVkJTIwU2Vydmlj
ZSUyMFByb3ZpZGVyLG91PUNlcnRpZmljYXRpb24lMjBBdXRob3JpdGllcyxvPUVudHJ1c3QsYz1V
Uz9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0O2JpbmFyeTCBkqCBj6CBjKSBiTCBhjELMAkGA1UE
BhMCVVMxEDAOBgNVBAoTB0VudHJ1c3QxIjAgBgNVBAsTGUNlcnRpZmljYXRpb24gQXV0aG9yaXRp
ZXMxMTAvBgNVBAsTKEVudHJ1c3QgTkZJIFRlc3QgU2hhcmVkIFNlcnZpY2UgUHJvdmlkZXIxDjAM
BgNVBAMTBUNSTDI1MCsGA1UdEAQkMCKADzIwMjAwMzAzMTU0MTAzWoEPMjAyMTAzMDMxNjExMDNa
MB8GA1UdIwQYMBaAFI8Jc8FggvBRsUpDLtsUoJuCygbRMB0GA1UdDgQWBBRE5cC6biCfdGBtljUk
oZSO0XJTqDAJBgNVHRMEAjAAMBkGCSqGSIb2fQdBAAQMMAobBFY4LjMDAgOoMA0GCSqGSIb3DQEB
CwUAA4IBAQBzobmRTubwGyK2sQeMweMD5hCZDSUSfS67AA8nste7Ib84Sih08UZ5TU7MR9Mw5hCz
XXzdlLzj+qegQuIEiqgjbX/vaETUq2mjjHDDtejPmhzbH7dn8AxuJT6WwTlWXrcI9pU73y1ofP1J
EqoP+G4cGknNdUEx+li2uUIXh26stQvs/NurLERusOdUTifLEiWTInDvx2K33sfp2Vwu0bbbikrX
wPJdmstV1DHmACQSWiy1KHnCUiia/ZY7FqhJkYEEn+VMLnGYXRBf6oeMBI4uQm2u73Fa8H9eMqDN
LpwGJ9BKHcFCRTeVZnZqxJZ6qyGqWw6zy1CLPEuztfNvcFmU</ds:X509Certificate>
                     </ds:X509Data>
                  </ds:KeyInfo>
               </ds:Signature>
               <saml2:Subject>
                  <saml2:NameID Format="urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName">CN=mc-qr-ehx-prod.laneslasys.org,OU=NHIN-Test,O=NHIN,C=us</saml2:NameID>
                  <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:holder-of-key">
                     <saml2:SubjectConfirmationData>
                        <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
                           <ds:KeyValue>
                              <ds:RSAKeyValue>
                                 <ds:Modulus>wVWsFatpYllnRF/PS09NvMqX9l6yA8PgOpNexpZGvk9HXE/8YZtBCystKDurmkGUJaHHD/86CkVI
KEzp2F9dNlMDlg2hmtKvlpdfLpAO4Myh36WPr3vwzl5IiBwhRMYbFvLomWbqGHYqVLA6sRZOQZSv
FteB8jEmlSqUhMddcitlVF0VZ04JkLmXTlPIOW5IMgcmMvij6OWt7LbXQqGCmqcWggxVBUQS22Sz
5tbsMpkxucbhSQac3VF7RtONmRn4fJRDaDNDNgku2WAp3rKZwb3eqr7PYCjzGF92+b9O5E7pM6UL
Vh3sCCgqxkKAxViYp6p8+eTI9d0IV3dxUqsbcQ==</ds:Modulus>
                                 <ds:Exponent>AQAB</ds:Exponent>
                              </ds:RSAKeyValue>
                           </ds:KeyValue>
                           <ds:X509Data>
                              <ds:X509Certificate>MIIHQDCCBiigAwIBAgIEW4oABDANBgkqhkiG9w0BAQsFADB2MQswCQYDVQQGEwJVUzEQMA4GA1UE
ChMHRW50cnVzdDEiMCAGA1UECxMZQ2VydGlmaWNhdGlvbiBBdXRob3JpdGllczExMC8GA1UECxMo
RW50cnVzdCBORkkgVGVzdCBTaGFyZWQgU2VydmljZSBQcm92aWRlcjAeFw0yMDAzMDMxNTQxMDNa
Fw0yMTAzMDMxNjExMDNaMFgxCzAJBgNVBAYTAnVzMQ0wCwYDVQQKEwROSElOMRIwEAYDVQQLEwlO
SElOLVRlc3QxJjAkBgNVBAMTHW1jLXFyLWVoeC1wcm9kLmxhbmVzbGFzeXMub3JnMIIBIjANBgkq
hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwVWsFatpYllnRF/PS09NvMqX9l6yA8PgOpNexpZGvk9H
XE/8YZtBCystKDurmkGUJaHHD/86CkVIKEzp2F9dNlMDlg2hmtKvlpdfLpAO4Myh36WPr3vwzl5I
iBwhRMYbFvLomWbqGHYqVLA6sRZOQZSvFteB8jEmlSqUhMddcitlVF0VZ04JkLmXTlPIOW5IMgcm
Mvij6OWt7LbXQqGCmqcWggxVBUQS22Sz5tbsMpkxucbhSQac3VF7RtONmRn4fJRDaDNDNgku2WAp
3rKZwb3eqr7PYCjzGF92+b9O5E7pM6ULVh3sCCgqxkKAxViYp6p8+eTI9d0IV3dxUqsbcQIDAQAB
o4ID8jCCA+4wDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjCC
AX0GCCsGAQUFBwEBBIIBbzCCAWswVQYIKwYBBQUHMAKGSWh0dHA6Ly9uZml0ZXN0d2ViLm1hbmFn
ZWQuZW50cnVzdC5jb20vQUlBL0NlcnRzSXNzdWVkVG9ORklNZWRpdW1TU1BDQS5wN2MwgccGCCsG
AQUFBzAChoG6bGRhcDovL25maXRlc3RkaXIubWFuYWdlZC5lbnRydXN0LmNvbS9vdT1FbnRydXN0
JTIwTkZJJTIwVGVzdCUyMFNoYXJlZCUyMFNlcnZpY2UlMjBQcm92aWRlcixvdT1DZXJ0aWZpY2F0
aW9uJTIwQXV0aG9yaXRpZXMsbz1FbnRydXN0LGM9VVM/Y0FDZXJ0aWZpY2F0ZTtiaW5hcnksY3Jv
c3NDZXJ0aWZpY2F0ZVBhaXI7YmluYXJ5MEgGCCsGAQUFBzABhjxodHRwOi8vbmZpdGVzdG9jc3Au
bWFuYWdlZC5lbnRydXN0LmNvbS9PQ1NQL05GSVRlc3RSZXNwb25kZXIwggGnBgNVHR8EggGeMIIB
mjCCAQGggf6ggfuGPGh0dHA6Ly9uZml0ZXN0d2ViLm1hbmFnZWQuZW50cnVzdC5jb20vQ1JMcy9O
RklUZXN0U1NQQ0EyLmNybIaBumxkYXA6Ly9uZml0ZXN0ZGlyLm1hbmFnZWQuZW50cnVzdC5jb20v
Y249V2luQ29tYmluZWQyLG91PUVudHJ1c3QlMjBORkklMjBUZXN0JTIwU2hhcmVkJTIwU2Vydmlj
ZSUyMFByb3ZpZGVyLG91PUNlcnRpZmljYXRpb24lMjBBdXRob3JpdGllcyxvPUVudHJ1c3QsYz1V
Uz9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0O2JpbmFyeTCBkqCBj6CBjKSBiTCBhjELMAkGA1UE
BhMCVVMxEDAOBgNVBAoTB0VudHJ1c3QxIjAgBgNVBAsTGUNlcnRpZmljYXRpb24gQXV0aG9yaXRp
ZXMxMTAvBgNVBAsTKEVudHJ1c3QgTkZJIFRlc3QgU2hhcmVkIFNlcnZpY2UgUHJvdmlkZXIxDjAM
BgNVBAMTBUNSTDI1MCsGA1UdEAQkMCKADzIwMjAwMzAzMTU0MTAzWoEPMjAyMTAzMDMxNjExMDNa
MB8GA1UdIwQYMBaAFI8Jc8FggvBRsUpDLtsUoJuCygbRMB0GA1UdDgQWBBRE5cC6biCfdGBtljUk
oZSO0XJTqDAJBgNVHRMEAjAAMBkGCSqGSIb2fQdBAAQMMAobBFY4LjMDAgOoMA0GCSqGSIb3DQEB
CwUAA4IBAQBzobmRTubwGyK2sQeMweMD5hCZDSUSfS67AA8nste7Ib84Sih08UZ5TU7MR9Mw5hCz
XXzdlLzj+qegQuIEiqgjbX/vaETUq2mjjHDDtejPmhzbH7dn8AxuJT6WwTlWXrcI9pU73y1ofP1J
EqoP+G4cGknNdUEx+li2uUIXh26stQvs/NurLERusOdUTifLEiWTInDvx2K33sfp2Vwu0bbbikrX
wPJdmstV1DHmACQSWiy1KHnCUiia/ZY7FqhJkYEEn+VMLnGYXRBf6oeMBI4uQm2u73Fa8H9eMqDN
LpwGJ9BKHcFCRTeVZnZqxJZ6qyGqWw6zy1CLPEuztfNvcFmU</ds:X509Certificate>
                           </ds:X509Data>
                        </ds:KeyInfo>
                     </saml2:SubjectConfirmationData>
                  </saml2:SubjectConfirmation>
               </saml2:Subject>
               <saml2:AuthnStatement AuthnInstant="2020-04-07T23:35:07.528Z">
                  <saml2:SubjectLocality Address="3.12.113.65" DNSName="mc-qr-ehx-prod.laneslasys.org"/>
                  <saml2:AuthnContext>
                     <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</saml2:AuthnContextClassRef>
                  </saml2:AuthnContext>
               </saml2:AuthnStatement>
               <saml2:AttributeStatement>
                  <saml2:Attribute Name="urn:oasis:names:tc:xspa:1.0:subject:subject-id" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                     <saml2:AttributeValue xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Michael Monisky</saml2:AttributeValue>
                  </saml2:Attribute>
                  <saml2:Attribute Name="urn:oasis:names:tc:xspa:1.0:subject:organization" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                     <saml2:AttributeValue xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LANES</saml2:AttributeValue>
                  </saml2:Attribute>
                  <saml2:Attribute Name="urn:oasis:names:tc:xspa:1.0:subject:organization-id" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                     <saml2:AttributeValue xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:oid:2.16.840.1.113883.3.2106</saml2:AttributeValue>
                  </saml2:Attribute>
                  <saml2:Attribute Name="urn:nhin:names:saml:homeCommunityId" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                     <saml2:AttributeValue xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:oid:2.16.840.1.113883.3.2106</saml2:AttributeValue>
                  </saml2:Attribute>
                  <saml2:Attribute Name="urn:oasis:names:tc:xacml:2.0:resource:resource-id" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                     <saml2:AttributeValue xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">58809^^^&amp;amp;2.16.840.1.113883.3.2106&amp;amp;ISO</saml2:AttributeValue>
                  </saml2:Attribute>
                  <saml2:Attribute Name="urn:oasis:names:tc:xacml:2.0:subject:role" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                     <saml2:AttributeValue>
                        <hl7:Role code="224608005" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED_CT" displayName="Administrative healthcare staff" xsi:type="hl7:CE" xmlns:hl7="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </saml2:AttributeValue>
                  </saml2:Attribute>
                  <saml2:Attribute Name="urn:oasis:names:tc:xspa:1.0:subject:purposeofuse" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                     <saml2:AttributeValue>
                        <hl7:PurposeOfUse code="TREATMENT" codeSystem="2.16.840.1.113883.3.18.7.1" codeSystemName="nhin-purpose" displayName="TREATMENT" xsi:type="hl7:CE" xmlns:hl7="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </saml2:AttributeValue>
                  </saml2:Attribute>
               </saml2:AttributeStatement>
            </saml2:Assertion>
         </wst:ValidateTarget>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="cd8fa5a1-6a80-4cf5-9028-7a26a3f6cac8" name="SOAP Response"/>
            <con:assertion type="XPath Match" id="b92f74cf-eca6-41d6-8b84-6592e79b6612" name="Status Code">
              <con:configuration><path>declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns1='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    //wst:Status[1]/wst:Code</path><content>http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/${#TestCase#ExpectedValidationStatus}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b92f74cf-eca6-41d6-8b84-6592e79b6612" name="Status Reason">
              <con:configuration><path>declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns1='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
//wst:Status[1]/wst:Reason</path><content>${#TestCase#ExpectedValidationReason}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestCase#Username}</con:username>
              <con:password>connectathon</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue" to="" generateMessageId="true"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>

      <con:properties>


      <con:property><con:name>Username</con:name><con:value>valid</con:value></con:property><con:property><con:name>XPathTest</con:name><con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience</con:value></con:property><con:property><con:name>XPathExpectedResult</con:name><con:value>https://gazelle.ihe.net</con:value></con:property><con:property><con:name>ExpectedValidationStatus</con:name><con:value>invalid</con:value></con:property><con:property><con:name>ExpectedValidationReason</con:name><con:value>Assertion should have conditions elements</con:value></con:property><con:property><con:name>Audience</con:name><con:value>https://gazelle.ihe.net</con:value></con:property></con:properties>
    <con:reportParameters/></con:testCase><con:properties>
            <con:property>
                <con:name>Audience</con:name>
                <con:value>https://validation.sequoiaproject.org</con:value>
            </con:property>
        </con:properties>
    <con:reportParameters/></con:testSuite>
    <con:testSuite id="9b618a84-e327-4794-a97b-fa159f91bd9e" name="Sequoia Security Token Service for public key">
        <con:description>In order to execute the test cases of this test suite, you will have to set/edit the property "Enabled" in your /opt/sts/picketlink-sts.xml file. </con:description><con:settings/>
        <con:runType>SEQUENTIAL</con:runType>
        
        <con:testCase id="7123d69c-aafa-409b-9731-ee0d367663d9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="notrustpropertyandvalidmodulus" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate with RSAKey" id="a4ef0bd9-107b-4937-a9b6-70dcbcf3c1b0">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>13758f54-f928-442e-8579-5bfdfd220ca3</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>notrustpropertyandvalidmodulus</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue/ds:Modulus)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>true</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>notrustpropertyandvalidmodulus</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>valid</con:value>
                </con:property>
                
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue/ds:Modulus)</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>true</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>
        <con:testCase id="22c8b131-86c4-4a1f-853e-f1418720a6c8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="notrustpropertyandinvalidmodulus" searchProperties="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate with RSAKey" id="920e2a01-d0f2-4bf7-935a-32884bffc586">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>13758f54-f928-442e-8579-5bfdfd220ca3</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>notrustpropertyandinvalidmodulus</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue/ds:Modulus</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>testModulus</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>invalid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>Validation failure: unable to verify digital signature: org.apache.xml.security.exceptions.Base64DecodingException: It should be divisible by four</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>notrustpropertyandinvalidmodulus</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>invalid</con:value>
                </con:property>
                <con:property>
                    <con:name>Reason</con:name>
                    <con:value>Error while handling token Request: PL00102: Processing Exception:Error unmarshalling                         assertion                     </con:value>
                </con:property>
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue/ds:Modulus</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>testModulus</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase>


        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:testCase id="7cdc65ef-cf7a-44b8-be66-e8882cf9e8d5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="trustpropertyandvalidmodulus" searchProperties="true" disabled="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate with RSAKey" id="b4b0d84a-c174-4b5c-a504-16427c8e6135">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>13758f54-f928-442e-8579-5bfdfd220ca3</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>trustpropertyandvalidmodulus</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue/ds:Modulus)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>true</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>valid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                
                
                
                
                
            </con:properties>
        <con:reportParameters/></con:testCase><con:testCase id="022a341c-a7e9-4b9b-a495-bd207bb96164" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="trustpropertyandinvalidmodulus" searchProperties="true" disabled="true">
            <con:settings/>


            <con:testStep type="calltestcase" name="Run Issue and validate with RSAKey" id="1d30efc6-0d05-4d82-ad1a-3f0ae5bb37aa">
                <con:settings/>
                <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:targetTestCase>13758f54-f928-442e-8579-5bfdfd220ca3</con:targetTestCase>
                    <con:properties>
                        <con:property>
                            <con:name>Username</con:name>
                            <con:value>trustpropertyandinvalidmodulus</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathTest</con:name>
                            <con:value>boolean(//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo)</con:value>
                        </con:property>
                        <con:property>
                            <con:name>XPathExpectedResult</con:name>
                            <con:value>false</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationStatus</con:name>
                            <con:value>invalid</con:value>
                        </con:property>
                        <con:property>
                            <con:name>ExpectedValidationReason</con:name>
                            <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find X509Certificate element in Signature</con:value>
                        </con:property>
                        <con:property>
                            <con:name>Audience</con:name>
                            <con:value>${#TestSuite#Audience}</con:value>
                        </con:property>
                    </con:properties>
                    <con:returnProperties/>
                    <con:runMode>PARALLELL</con:runMode>
                </con:config>
            </con:testStep>
            <con:properties>
                <con:property>
                    <con:name>Username</con:name>
                    <con:value>trustpropertyandinvalidmodulus</con:value>
                </con:property>
                <con:property>
                    <con:name>Validation</con:name>
                    <con:value>valid</con:value>
                </con:property>
                <con:property>
                    <con:name>Reason</con:name>
                    <con:value>Validation failure: unable to verify digital signature: PL00092: Null Value:Cannot find                         Signature element                     </con:value>
                </con:property>
                <con:property>
                    <con:name>Xpath</con:name>
                    <con:value>//wst:RequestedSecurityToken/saml2:Assertion/ds:Signature/ds:KeyInfo/ds:KeyValue/ds:RSAKeyValue/ds:Modulus</con:value>
                </con:property>
                <con:property>
                    <con:name>XpathResult</con:name>
                    <con:value>testModulus</con:value>
                </con:property>
            </con:properties>
        <con:reportParameters/></con:testCase><con:properties>
            <con:property>
                <con:name>Audience</con:name>
                <con:value>https://validation.sequoiaproject.org</con:value>
            </con:property>
        </con:properties>
    <con:reportParameters/></con:testSuite><con:testSuite id="2f1bdada-764a-4068-9869-afdf7fb5479b" name="Loading External Properties"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8c554dfe-7820-41be-afe0-6212d540a160" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="normal_properties_file" searchProperties="true">
      <con:settings/>
      <con:testStep type="request" id="33bd15e1-5649-48ac-adab-3b5d30ddc1bd" name="REQUEST">
        <con:settings/>
          <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>STSBinding</con:interface>
          <con:operation>IssueToken</con:operation>
          <con:request name="REQUEST" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">false</con:setting></con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
            <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
              <con:configuration><path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
declare namespace wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
declare namespace wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
declare namespace ns1='urn:hl7-org:v3';
declare namespace xs='http://www.w3.org/2001/XMLSchema';
declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
declare namespace ns2='http://www.w3.org/2005/08/addressing';
declare namespace env='http://www.w3.org/2003/05/soap-envelope';
declare namespace wsa='http://www.w3.org/2005/08/addressing';
declare namespace hl7="urn:hl7-org:v3";
${#TestCase#XPathTest}</path><content>${#TestCase#XPathExpectedResult}</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
              <con:configuration><scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestCase#Username}</con:username><con:password>connectathon</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      
      
      
      <con:properties>
        
        
      <con:property><con:name>Username</con:name><con:value>valid</con:value></con:property><con:property><con:name>XPathTest</con:name><con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience</con:value></con:property><con:property><con:name>XPathExpectedResult</con:name><con:value>https://gazelle.ihe.net</con:value></con:property><con:property><con:name>ExpectedValidationStatus</con:name><con:value>valid</con:value></con:property><con:property><con:name>ExpectedValidationReason</con:name><con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value></con:property><con:property><con:name>Audience</con:name><con:value>https://gazelle.ihe.net</con:value></con:property></con:properties>
    <con:reportParameters/></con:testCase><con:testCase id="1972c181-a50f-4655-ab65-1ea84f3d1aca" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missing_properties_file" searchProperties="true">
      <con:settings/>
      <con:testStep type="request" id="10b4ae90-9392-476d-b294-c7adc157e8ce" name="REQUEST">
        <con:settings/>
          <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>STSBinding</con:interface>
          <con:operation>IssueToken</con:operation>
          <con:request name="REQUEST" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">false</con:setting></con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
            
            
            <con:assertion type="Not SOAP Fault Assertion" id="737b8f59-c7c6-4182-b474-ec650c09f5e8" name="SOAP Fault"/><con:assertion type="Simple Contains" id="8e7859f8-fd88-468c-8a2d-6d6e6444dc36" name="Contains"><con:configuration><token>Property file not found</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials>
              <con:username>${#TestCase#Username}</con:username><con:password>connectathon</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      
      
      
      <con:properties>
        
        
      <con:property><con:name>Username</con:name><con:value>valid</con:value></con:property><con:property><con:name>XPathTest</con:name><con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience</con:value></con:property><con:property><con:name>XPathExpectedResult</con:name><con:value>https://gazelle.ihe.net</con:value></con:property><con:property><con:name>ExpectedValidationStatus</con:name><con:value>valid</con:value></con:property><con:property><con:name>ExpectedValidationReason</con:name><con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value></con:property><con:property><con:name>Audience</con:name><con:value>https://gazelle.ihe.net</con:value></con:property></con:properties>
    <con:reportParameters/></con:testCase><con:testCase id="b19e7d26-ec69-49d8-89bf-fe6fcf038112" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="missing_property_in_file" searchProperties="true">
      <con:settings/>
      <con:testStep type="request" id="76fed4c8-0469-4330-927b-6934ad7b8e10" name="REQUEST">
        <con:settings/>
          <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>STSBinding</con:interface>
          <con:operation>IssueToken</con:operation>
          <con:request name="REQUEST" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">false</con:setting></con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
            
            
            <con:assertion type="Not SOAP Fault Assertion" id="76cdc942-9b9d-4e4d-b503-b23f8e5659b2" name="SOAP Fault"/><con:assertion type="Simple Contains" id="73e93064-da96-425b-83ae-38f24889aaaa" name="Contains"><con:configuration><token>Missing property with key</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials>
              <con:username>${#TestCase#Username}</con:username><con:password>connectathon</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      
      
      
      <con:properties>
        
        
      <con:property><con:name>Username</con:name><con:value>valid</con:value></con:property><con:property><con:name>XPathTest</con:name><con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience</con:value></con:property><con:property><con:name>XPathExpectedResult</con:name><con:value>https://gazelle.ihe.net</con:value></con:property><con:property><con:name>ExpectedValidationStatus</con:name><con:value>valid</con:value></con:property><con:property><con:name>ExpectedValidationReason</con:name><con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value></con:property><con:property><con:name>Audience</con:name><con:value>https://gazelle.ihe.net</con:value></con:property></con:properties>
    <con:reportParameters/></con:testCase><con:properties/></con:testSuite><con:savedRecentRuns>1</con:savedRecentRuns><con:testSuite id="152f00ed-22c5-4847-ad6c-b2adfee193fa" name="Library" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    
    <con:testCase id="02cebd89-e8da-493a-8a9c-decdee26ffa5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Issue and validate" searchProperties="true">
      <con:settings/>
      <con:testStep type="request" id="6224061f-10dc-4cf4-bf35-2ca63fe5f04a" name="Issue">
        <con:settings/>
          <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>STSBinding</con:interface>
          <con:operation>IssueToken</con:operation>
          <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">false</con:setting></con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
            <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
              <con:configuration><path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
declare namespace wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
declare namespace wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
declare namespace ns1='urn:hl7-org:v3';
declare namespace xs='http://www.w3.org/2001/XMLSchema';
declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
declare namespace ns2='http://www.w3.org/2005/08/addressing';
declare namespace env='http://www.w3.org/2003/05/soap-envelope';
declare namespace wsa='http://www.w3.org/2005/08/addressing';
declare namespace hl7="urn:hl7-org:v3";
${#TestCase#XPathTest}</path><content>${#TestCase#XPathExpectedResult}</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
              <con:configuration><scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestCase#Username}</con:username><con:password>connectathon</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Assertion transfert" id="9e29b01e-eaca-40dd-9f1d-d1c3a6469123">
        <con:settings/>
          <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="false" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>assertion request</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Issue</con:sourceStep>
            <con:sourcePath>declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                            declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                            //wst:RequestedSecurityToken[1]/saml2:Assertion[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>Validate</con:targetStep>
            <con:targetPath>declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                            declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                            //wst:RequestSecurityToken[1]/wst:ValidateTarget[1]/saml2:Assertion[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="request" id="bb4040a4-9dbd-4adf-a5b9-3058bfffad77" name="Validate">
        <con:settings/>
          <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>STSBinding</con:interface>
          <con:operation>IssueToken</con:operation>
          <con:request name="Validate" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="f2d16044-b063-4a9a-a89a-d08b6e06517f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">false</con:setting></con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Validate</wst:RequestType>       
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>       
         <wst:ValidateTarget>        
               <saml2:Assertion ID="ID_4a9d787c-73ab-456a-9dc0-91ec4783879f" IssueInstant="2020-06-09T09:07:29.562Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">
                  <saml2:Issuer Format="urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName">CN=validation.sequoiaproject.org, OU=NHIN-Test, O=NHIN, C=US</saml2:Issuer>
                  <dsig:Signature xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
                     <dsig:SignedInfo>
                        <dsig:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                        <dsig:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
                        <dsig:Reference URI="#ID_4a9d787c-73ab-456a-9dc0-91ec4783879f">
                           <dsig:Transforms>
                              <dsig:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
                              <dsig:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                           </dsig:Transforms>
                           <dsig:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                           <dsig:DigestValue>GTH3fHBW9WNfYCL+SJ8e65Gdc0Y=</dsig:DigestValue>
                        </dsig:Reference>
                     </dsig:SignedInfo>
                     <dsig:SignatureValue>dZldBvYFbLL98Q09HUoMVRfYEOyg62TlPL/ONw/2av+Z4nob3Yr6SQ1UUloO/RcEhYgHBuDNyMqIDb7yDE+In+5dfzSwiQpmDAzm5ai5nry58KnPkcJGAok3MF/do2QC22psNf3UxvTYKbA1oV91VaWMzAm0jYKWXdHxMxAq0oxf+MlY6Hjm2ut0uEqWI1c3r9B9VkiaFI/qVVCsXvkFnxID3dVenuDrjyqg7YiWIPsNQMPJDGHum3H1t6bPQy5fSccAZdYeyHEk8mKCO3I/rUlT21UAVb3Z8FspSYZYQLhF444MdPg4dp/GxQBIB5KGcHre9OypNmbGS6BdpbTgIw==</dsig:SignatureValue>
                     <dsig:KeyInfo>
                        <dsig:X509Data>
                           <dsig:X509Certificate>MIIHhTCCBm2gAwIBAgIEW4oH5DANBgkqhkiG9w0BAQsFADB2MQswCQYDVQQGEwJVUzEQMA4GA1UEChMHRW50cnVzdDEiMCAGA1UECxMZQ2VydGlmaWNhdGlvbiBBdXRob3JpdGllczExMC8GA1UECxMoRW50cnVzdCBORkkgVGVzdCBTaGFyZWQgU2VydmljZSBQcm92aWRlcjAeFw0yMDAzMjcwNzQ0MzJaFw0yMTAzMjcwODE0MzJaMFgxCzAJBgNVBAYTAlVTMQ0wCwYDVQQKEwROSElOMRIwEAYDVQQLEwlOSElOLVRlc3QxJjAkBgNVBAMTHXZhbGlkYXRpb24uc2VxdW9pYXByb2plY3Qub3JnMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsHuzZPtoOlBi4vkSeHBkMHNOH5hg3EJh8y3JovH54jHLjjye0koku7pHWg7pMVq/lLs4BegwRkDZCCVEQSvOTgMd2kHnc973CSXiy/z5GzsR3ngySsDA3TVM7J3xE4hfH36NenoTv8G7IQ3D0E4VVCuWVtNHg9LSOcyrrzHamYwQpD6PF4ldw4DVBkZTc0L1CkNEbcxpxCu2XFWDRC1r3f8MWzbGfOaZVf9w9/oNQePUD7RQvWRiFX9ahInPpZWsEkqCgkVyMqJR2GpAd0YwI8kz3bRS26oX66+cX0djU46veyiyiMeVQjkymdLZTdgllc2b0W9LTbeUvJEZ8aI63QIDAQABo4IENzCCBDMwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjCCAX0GCCsGAQUFBwEBBIIBbzCCAWswVQYIKwYBBQUHMAKGSWh0dHA6Ly9uZml0ZXN0d2ViLm1hbmFnZWQuZW50cnVzdC5jb20vQUlBL0NlcnRzSXNzdWVkVG9ORklNZWRpdW1TU1BDQS5wN2MwgccGCCsGAQUFBzAChoG6bGRhcDovL25maXRlc3RkaXIubWFuYWdlZC5lbnRydXN0LmNvbS9vdT1FbnRydXN0JTIwTkZJJTIwVGVzdCUyMFNoYXJlZCUyMFNlcnZpY2UlMjBQcm92aWRlcixvdT1DZXJ0aWZpY2F0aW9uJTIwQXV0aG9yaXRpZXMsbz1FbnRydXN0LGM9VVM/Y0FDZXJ0aWZpY2F0ZTtiaW5hcnksY3Jvc3NDZXJ0aWZpY2F0ZVBhaXI7YmluYXJ5MEgGCCsGAQUFBzABhjxodHRwOi8vbmZpdGVzdG9jc3AubWFuYWdlZC5lbnRydXN0LmNvbS9PQ1NQL05GSVRlc3RSZXNwb25kZXIwQwYDVR0RBDwwOoITYXNzdXJpdHkuZHluZG5zLm9yZ4IjdmFsaWRhdGlvbi10YW5nby5zZXF1b2lhcHJvamVjdC5vcmcwggGnBgNVHR8EggGeMIIBmjCCAQGggf6ggfuGPGh0dHA6Ly9uZml0ZXN0d2ViLm1hbmFnZWQuZW50cnVzdC5jb20vQ1JMcy9ORklUZXN0U1NQQ0EyLmNybIaBumxkYXA6Ly9uZml0ZXN0ZGlyLm1hbmFnZWQuZW50cnVzdC5jb20vY249V2luQ29tYmluZWQyLG91PUVudHJ1c3QlMjBORkklMjBUZXN0JTIwU2hhcmVkJTIwU2VydmljZSUyMFByb3ZpZGVyLG91PUNlcnRpZmljYXRpb24lMjBBdXRob3JpdGllcyxvPUVudHJ1c3QsYz1VUz9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0O2JpbmFyeTCBkqCBj6CBjKSBiTCBhjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VudHJ1c3QxIjAgBgNVBAsTGUNlcnRpZmljYXRpb24gQXV0aG9yaXRpZXMxMTAvBgNVBAsTKEVudHJ1c3QgTkZJIFRlc3QgU2hhcmVkIFNlcnZpY2UgUHJvdmlkZXIxDjAMBgNVBAMTBUNSTDI2MCsGA1UdEAQkMCKADzIwMjAwMzI3MDc0NDMyWoEPMjAyMTAzMjcwODE0MzJaMB8GA1UdIwQYMBaAFI8Jc8FggvBRsUpDLtsUoJuCygbRMB0GA1UdDgQWBBTRIyqTLTv/eKH1tAzVo12Gg2yAajAJBgNVHRMEAjAAMBkGCSqGSIb2fQdBAAQMMAobBFY4LjMDAgOoMA0GCSqGSIb3DQEBCwUAA4IBAQBSl7AEVS6hePvatC8HjJocXoGSboRTRZTo23Sxp966DIrwUGcNki9yjfQExJgRc3CaE7oHPP2wL0UJvDf63ppiihgWMiQiJpEfmgOG/A1+bvvI2koU0scHuwxg3Bz4qjv0dqEeHGHstDM6nCn8vxRxpzA3T6NgAXQxffdHObCqdTsHzpCDS60zatE0VtWfG15Bbra0/X89mbtXCz2OLpdcmESxEbC6YOkl+MbnyjkbXrBi9fxXk7gaAR3T2KrV/2kiu75VZeZGhlMw/6J/orhCZibMVm5nG+R6NzFqWzT4NdfYdJoo4jCu6/+HivCFOJtkQydFk3UEt1E1qgzOOvQG</dsig:X509Certificate>
                        </dsig:X509Data>
                        <dsig:KeyValue>
                           <dsig:RSAKeyValue>
                              <dsig:Modulus>sHuzZPtoOlBi4vkSeHBkMHNOH5hg3EJh8y3JovH54jHLjjye0koku7pHWg7pMVq/lLs4BegwRkDZCCVEQSvOTgMd2kHnc973CSXiy/z5GzsR3ngySsDA3TVM7J3xE4hfH36NenoTv8G7IQ3D0E4VVCuWVtNHg9LSOcyrrzHamYwQpD6PF4ldw4DVBkZTc0L1CkNEbcxpxCu2XFWDRC1r3f8MWzbGfOaZVf9w9/oNQePUD7RQvWRiFX9ahInPpZWsEkqCgkVyMqJR2GpAd0YwI8kz3bRS26oX66+cX0djU46veyiyiMeVQjkymdLZTdgllc2b0W9LTbeUvJEZ8aI63Q==</dsig:Modulus>
                              <dsig:Exponent>AQAB</dsig:Exponent>
                           </dsig:RSAKeyValue>
                        </dsig:KeyValue>
                     </dsig:KeyInfo>
                  </dsig:Signature>
                  <saml2:Subject>
                     <saml2:NameID Format="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress">valid@ihe-europe.net</saml2:NameID>
                     <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"/>
                  </saml2:Subject>
                  <saml2:Conditions NotBefore="2020-06-09T09:07:29.562Z" NotOnOrAfter="2020-06-09T11:07:33.562Z">
                     <saml2:AudienceRestriction>
                        <saml2:Audience>https://gazelle.ihe.net</saml2:Audience>
                     </saml2:AudienceRestriction>
                  </saml2:Conditions>
                  <saml2:AuthnStatement AuthnInstant="2020-06-09T09:07:29.562Z">
                     <saml2:AuthnContext>
                        <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
                     </saml2:AuthnContext>
                  </saml2:AuthnStatement>
                  <saml2:AttributeStatement>
                     <saml2:Attribute FriendlyName="XSPA Subject" Name="urn:oasis:names:tc:xspa:1.0:subject:subject-id" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">valid</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute FriendlyName="XSPA Organization" Name="urn:oasis:names:tc:xspa:1.0:subject:organization" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">IHE-Europe</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute FriendlyName="XSPA Organization ID" Name="urn:oasis:names:tc:xspa:1.0:subject:organization-id" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:anyURI" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:oid:1.2.3</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute FriendlyName="XCA Home Community ID" Name="urn:nhin:names:saml:homeCommunityId" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:anyURI" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:oid:1.2.3.4.5</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute Name="urn:oasis:names:tc:xacml:2.0:subject:role">
                        <saml2:AttributeValue>
                           <Role code="112247003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED_CT" displayName="Medical Doctor" xsi:type="CE" xmlns="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute Name="urn:oasis:names:tc:xspa:1.0:subject:purposeofuse">
                        <saml2:AttributeValue>
                           <PurposeOfUse code="TREATMENT" codeSystem="2.16.840.1.113883.3.18.7.1" codeSystemName="nhin-purpose" displayName="Treatment" xsi:type="CE" xmlns="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </saml2:AttributeValue>
                     </saml2:Attribute>
                  </saml2:AttributeStatement>
               </saml2:Assertion>
         </wst:ValidateTarget>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="cd8fa5a1-6a80-4cf5-9028-7a26a3f6cac8" name="SOAP Response"/>
            <con:assertion type="XPath Match" id="b92f74cf-eca6-41d6-8b84-6592e79b6612" name="Status Code">
              <con:configuration><path>declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns1='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    //wst:Status[1]/wst:Code</path><content>http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/${#TestCase#ExpectedValidationStatus}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b92f74cf-eca6-41d6-8b84-6592e79b6612" name="Status Reason">
              <con:configuration><path>declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns1='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
//wst:Status[1]/wst:Reason</path><content>${#TestCase#ExpectedValidationReason}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestCase#Username}</con:username>
              <con:password>connectathon</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue" to="" generateMessageId="true"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      
      <con:properties>
        
        
      <con:property><con:name>Username</con:name><con:value>valid</con:value></con:property><con:property><con:name>XPathTest</con:name><con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience</con:value></con:property><con:property><con:name>XPathExpectedResult</con:name><con:value>https://gazelle.ihe.net</con:value></con:property><con:property><con:name>ExpectedValidationStatus</con:name><con:value>valid</con:value></con:property><con:property><con:name>ExpectedValidationReason</con:name><con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value></con:property><con:property><con:name>Audience</con:name><con:value>https://gazelle.ihe.net</con:value></con:property></con:properties>
    <con:reportParameters/></con:testCase><con:testCase id="13758f54-f928-442e-8579-5bfdfd220ca3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Issue and validate with RSAKey" searchProperties="true">
      <con:settings/>
      <con:testStep type="request" id="c38a584f-8dd4-4c2e-a216-dd88abd044ba" name="Issue">
        <con:settings/>
          <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>STSBinding</con:interface>
          <con:operation>IssueToken</con:operation>
          <con:request name="Issue" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d9ac937f-9f88-483f-8caa-5a41f74e1215">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
            <con:setting id="WsdlSettings@pretty-print-response-xml">true</con:setting></con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:env="env">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>
         <wsp:AppliesTo xmlns:wsp="http://www.w3.org/ns/ws-policy">
            <wsa:EndpointReference xmlns:wsa="http://www.w3.org/2005/08/addressing">
               <wsa:Address>${#TestCase#Audience}</wsa:Address>
            </wsa:EndpointReference>
         </wsp:AppliesTo>
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="d4b9fa5e-9a19-4119-8916-0cca8d7f0e97" name="SOAP Response"/>
            <con:assertion type="XPath Match" id="315887a3-a539-47c8-97b8-8e9e49c2e0c2" name="XPath Match">
              <con:configuration><path>declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
declare namespace wsse11='http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd';
declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
declare namespace wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
declare namespace ns1='urn:hl7-org:v3';
declare namespace xs='http://www.w3.org/2001/XMLSchema';
declare namespace wsp='http://schemas.xmlsoap.org/ws/2004/09/policy';
declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
declare namespace ns2='http://www.w3.org/2005/08/addressing';
declare namespace env='http://www.w3.org/2003/05/soap-envelope';
declare namespace wsa='http://www.w3.org/2005/08/addressing';
declare namespace hl7="urn:hl7-org:v3";
${#TestCase#XPathTest}</path><content>${#TestCase#XPathExpectedResult}</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="2191e34a-91da-455d-91be-6f3d687a122c" name="Validity Period">
              <con:configuration><scriptText><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def username = messageExchange.modelItem.testStep.testCase.getPropertyValue('Username')

if(username != "null"){
	
	// Init
	def now = new Date()
	def notBefore = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotBefore"]
	def notOnOrAfter = holder["//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/@NotOnOrAfter"]
	
	Date dateNotBefore = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notBefore)
	log.info "DateNotBefore : " + dateNotBefore
	Date dateNotOnOrAfter = Date.parse("yyyy-MM-dd'T'kk:mm:ss.SSSX", notOnOrAfter)
	log.info "dateNotOnOrAfter : " + dateNotOnOrAfter

	// Verify date order according to the username
	if(username == "expired"){
		assert (dateNotBefore < dateNotOnOrAfter && dateNotOnOrAfter < now), "Assertion should be expired"
	}else if(username == "notyetvalid") {
		assert (now < dateNotBefore && dateNotBefore < dateNotOnOrAfter), "Assertion validity period should not have been reached."
	}else{
		assert (dateNotBefore < now && now < dateNotOnOrAfter), "Assertion should be currently on its validity period"
	}
	
	use(groovy.time.TimeCategory) {
		
		// Verify assertion validity duration (2 hours)
		def duration =  dateNotOnOrAfter - dateNotBefore
		assert (duration.days == 0 && duration.hours == 2 && duration.minutes >= 0), "Assertion validity period should be 3 hours"
	
		// Verify validity delay according to the username
		if(username == "notyetvalid" || username == "expired") {
			if(username == "notyetvalid"){
				 duration = dateNotBefore - now
			}else{
				 duration = now - dateNotBefore
			}
			log.info "Assertion delay from now: days=" + duration.days + " hours=" + duration.hours + " minutes=" + duration.minutes
			assert((duration.days == 0 && duration.hours == 23 && duration.minutes >= 59) || (duration.days == 1 && duration.hours == 0 && duration.minutes <= 1)), "Assertion validity should be delayed from 1 day"
		}
	}
	
}else{
	assert false, "Username property is not defined"
}
]]></scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestCase#Username}</con:username><con:password>connectathon</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Assertion transfert" id="e9f9b4d1-3958-4d3c-a1dc-de71f135cb7e">
        <con:settings/>
          <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="false" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>assertion request</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Issue</con:sourceStep>
            <con:sourcePath>declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                            declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                            //wst:RequestedSecurityToken[1]/saml2:Assertion[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>Validate</con:targetStep>
            <con:targetPath>declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                            declare namespace saml2='urn:oasis:names:tc:SAML:2.0:assertion';
                            //wst:RequestSecurityToken[1]/wst:ValidateTarget[1]/saml2:Assertion[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="request" id="a3aacf12-1e76-4b64-a19c-78f5f668a691" name="Validate">
        <con:settings/>
          <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>STSBinding</con:interface>
          <con:operation>IssueToken</con:operation>
          <con:request name="Validate" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="f2d16044-b063-4a9a-a89a-d08b6e06517f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">true</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#ServiceBaseURL}/gazelle-sts</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
   <soap:Header>
      <Action soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</Action>
      <MessageID soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:9901f17a-14c4-4dc0-a639-132b96d5fd0d</MessageID>
      <To soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">https://gazelle.ihe.net/gazelle-sts</To>
      <ReplyTo soap:mustUnderstand="true" xmlns="http://www.w3.org/2005/08/addressing">
         <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>
      </ReplyTo>
   </soap:Header>
   <soap:Body>
      <wst:RequestSecurityToken xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512">
         <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Validate</wst:RequestType>       
         <wst:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</wst:TokenType>       
         <wst:ValidateTarget>        
               <saml2:Assertion ID="ID_e6052073-0473-4fd4-8210-f1cdbbd4d63d" IssueInstant="2020-04-22T08:36:50.051Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">
                  <saml2:Issuer Format="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified">urn:ihe-europe:sts</saml2:Issuer>
                  <dsig:Signature xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
                     <dsig:SignedInfo>
                        <dsig:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#WithComments"/>
                        <dsig:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
                        <dsig:Reference URI="#ID_e6052073-0473-4fd4-8210-f1cdbbd4d63d">
                           <dsig:Transforms>
                              <dsig:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
                              <dsig:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                           </dsig:Transforms>
                           <dsig:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                           <dsig:DigestValue>ZJDQOMqIRnCRIoEnV48fSVfFs8Q=</dsig:DigestValue>
                        </dsig:Reference>
                     </dsig:SignedInfo>
                     <dsig:SignatureValue>e380W6KVnal+Usof1mEhFJJ8kSKPos89X4ZjHZ/ptPB4NGxIheKoyRFOFfuOoXjSF2ToFLIfF0oUlYD55Fk7n2pMVxRtr19k9ngK+3BWmcXSBi7l+scL5lpW7IceXb7ON1A5wy6LlGYyWmtaxlykfJ0QM/Xmx4VZJ6JMAV4AJN8=</dsig:SignatureValue>
                     <dsig:KeyInfo>
                        <dsig:X509Data>
                           <dsig:X509Certificate>MIIDfDCCAuWgAwIBAgIBBTANBgkqhkiG9w0BAQ0FADBFMQswCQYDVQQGEwJDSDEMMAoGA1UECgwDSUhFMSgwJgYDVQQDDB9laGVhbHRoc3Vpc3NlLmloZS1ldXJvcGUubmV0IENBMB4XDTE3MDMyMjE1NDMzMVoXDTI3MDMyMjE1NDMzMVowODELMAkGA1UEBhMCQ0gxEzARBgNVBAoMCklIRSBFdXJvcGUxFDASBgNVBAMMC2dhemVsbGUtc3RzMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCgP+XdpOpE6+bqLOc1cX5OS5rs9VwSg7EAgKeen9s+l95f+q9rAW9BD7sqIRF8t0VJ++FSKZiVxWCQqN8tgYMPtx7Meen+Q2n2ZMAkIw4p++DsQUxo2AwGtssBM64KNMClFaJuzVk673dvVouFKc7aO1uR1WpY0DzcRv75kxX54wIDAQABo4IBhzCCAYMwSgYDVR0fBEMwQTA/oD2gO4Y5aHR0cHM6Ly9laGVhbHRoc3Vpc3NlLmloZS1ldXJvcGUubmV0L2dzcy9jcmwvMjIvY2FjcmwuY3JsMEgGCWCGSAGG+EIBBAQ7FjlodHRwczovL2VoZWFsdGhzdWlzc2UuaWhlLWV1cm9wZS5uZXQvZ3NzL2NybC8yMi9jYWNybC5jcmwwSAYJYIZIAYb4QgEDBDsWOWh0dHBzOi8vZWhlYWx0aHN1aXNzZS5paGUtZXVyb3BlLm5ldC9nc3MvY3JsLzIyL2NhY3JsLmNybDAJBgNVHRMEAjAAMA4GA1UdDwEB/wQEAwIE8DARBglghkgBhvhCAQEEBAMCBeAwHQYDVR0OBBYEFDRG6TMbdIAZZNziNIA41s7nVf6qMB8GA1UdIwQYMBaAFCiX793eMVhsVvKGRuIR5D44cV8vMDMGA1UdJQQsMCoGCCsGAQUFBwMCBggrBgEFBQcDBAYKKwYBBAGCNxQCAgYIKwYBBQUHAwEwDQYJKoZIhvcNAQENBQADgYEAYER9PUmhS6RFNl+CXWSvNXwmnYDwZ7P5WfAes5/41XL4aBadzytY4Ezvy0XAmvKB+MAvTrjWv6pAN1oBy4pPWzOa5iYfGnzKvE806OAaN43wuMxplVF50M8RAzFJUQK4ZRtRg9q/VcdyxFUfq0F0vT8WPSGmd+2G/7JmqYiE19g=</dsig:X509Certificate>
                        </dsig:X509Data>
                        <dsig:KeyValue>
                           <dsig:RSAKeyValue>
                              <dsig:Modulus>oD/l3aTqROvm6iznNXF+Tkua7PVcEoOxAICnnp/bPpfeX/qvawFvQQ+7KiERfLdFSfvhUimYlcVgkKjfLYGDD7cezHnp/kNp9mTAJCMOKfvg7EFMaNgMBrbLATOuCjTApRWibs1ZOu93b1aLhSnO2jtbkdVqWNA83Eb++ZMV+eM=</dsig:Modulus>
                              <dsig:Exponent>AQAB</dsig:Exponent>
                           </dsig:RSAKeyValue>
                        </dsig:KeyValue>
                     </dsig:KeyInfo>
                  </dsig:Signature>
                  <saml2:Subject>
                     <saml2:NameID NameQualifier="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified">valid</saml2:NameID>
                     <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"/>
                  </saml2:Subject>
                  <saml2:Conditions NotBefore="2020-04-22T08:36:50.051Z" NotOnOrAfter="2020-04-22T10:36:54.051Z">
                     <saml2:AudienceRestriction>
                        <saml2:Audience>https://validation.sequoiaproject.org</saml2:Audience>
                     </saml2:AudienceRestriction>
                  </saml2:Conditions>
                  <saml2:AuthnStatement AuthnInstant="2020-04-22T08:36:50.051Z">
                     <saml2:AuthnContext>
                        <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
                     </saml2:AuthnContext>
                  </saml2:AuthnStatement>
                  <saml2:AttributeStatement>
                     <saml2:Attribute FriendlyName="XSPA Subject" Name="urn:oasis:names:tc:xspa:1.0:subject:subject-id" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">valid</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute FriendlyName="XSPA Organization" Name="urn:oasis:names:tc:xspa:1.0:subject:organization" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">IHE-Europe</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute FriendlyName="XSPA Organization ID" Name="urn:oasis:names:tc:xspa:1.0:subject:organization-id" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:anyURI" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:oid:1.2.3</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute FriendlyName="XCA Home Community ID" Name="urn:ihe:iti:xca:2010:homeCommunityId" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:uri">
                        <saml2:AttributeValue xsi:type="xs:anyURI" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:oid:1.2.3.4.5</saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute Name="urn:oasis:names:tc:xacml:2.0:subject:role">
                        <saml2:AttributeValue>
                           <Role code="112247003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED_CT" displayName="Medical Doctor" xsi:type="CE" xmlns="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </saml2:AttributeValue>
                     </saml2:Attribute>
                     <saml2:Attribute Name="urn:oasis:names:tc:xspa:1.0:subject:purposeofuse">
                        <saml2:AttributeValue>
                           <PurposeOfUse code="99-101" codeSystem="1.3.6.1.4.1.21367.3000.4.1" codeSystemName="connectathon PurposeOfUse codes" displayName="TREATMENT" xsi:type="CE" xmlns="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </saml2:AttributeValue>
                     </saml2:Attribute>
                  </saml2:AttributeStatement>
               </saml2:Assertion>
         </wst:ValidateTarget>
      </wst:RequestSecurityToken>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="cd8fa5a1-6a80-4cf5-9028-7a26a3f6cac8" name="SOAP Response"/>
            <con:assertion type="XPath Match" id="b92f74cf-eca6-41d6-8b84-6592e79b6612" name="Status Code">
              <con:configuration><path>declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns1='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
                                    //wst:Status[1]/wst:Code</path><content>http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/${#TestCase#ExpectedValidationStatus}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b92f74cf-eca6-41d6-8b84-6592e79b6612" name="Status Reason">
              <con:configuration><path>declare namespace wst='http://docs.oasis-open.org/ws-sx/ws-trust/200512';
                                    declare namespace ns1='http://www.w3.org/2005/08/addressing';
                                    declare namespace env='http://www.w3.org/2003/05/soap-envelope';
//wst:Status[1]/wst:Reason</path><content>${#TestCase#ExpectedValidationReason}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestCase#Username}</con:username>
              <con:password>connectathon</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue" to="" generateMessageId="true"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      
      <con:properties>
        
        
      <con:property><con:name>Username</con:name><con:value>valid</con:value></con:property><con:property><con:name>XPathTest</con:name><con:value>//wst:RequestedSecurityToken/saml2:Assertion/saml2:Conditions/saml2:AudienceRestriction/saml2:Audience</con:value></con:property><con:property><con:name>XPathExpectedResult</con:name><con:value>https://validation.sequoiaproject.org</con:value></con:property><con:property><con:name>ExpectedValidationStatus</con:name><con:value>valid</con:value></con:property><con:property><con:name>ExpectedValidationReason</con:name><con:value>SAMLV2.0 Assertion successfuly validated (with NO Authz-Consent option)</con:value></con:property><con:property><con:name>Audience</con:name><con:value>https://validation.sequoiaproject.org</con:value></con:property></con:properties>
    <con:reportParameters/></con:testCase><con:properties/>
  <con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="COMPLEMENT" password="connectathon">https://sake.irisa.fr/gazelle-sts</con:endpoint></con:endpointStrategy><con:properties>
    <con:property>
      <con:name>ServiceBaseURL</con:name>
        <con:value>http://localhost</con:value>
    </con:property>
  </con:properties>
  <con:wssContainer/>
  <con:databaseConnectionContainer/><con:jmsConnectionContainer/><con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/>
<con:authRepository/><con:tags/></con:soapui-project><!--@formatter:on-->